import {
  __commonJS
} from "./chunk-MF7N2UXY.js";

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/core/tokenTypes.js
var require_tokenTypes = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/core/tokenTypes.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _default = {
      WORD: "word",
      STRING: "string",
      RESERVED: "reserved",
      RESERVED_TOP_LEVEL: "reserved-top-level",
      RESERVED_TOP_LEVEL_NO_INDENT: "reserved-top-level-no-indent",
      RESERVED_NEWLINE: "reserved-newline",
      OPERATOR: "operator",
      OPEN_PAREN: "open-paren",
      CLOSE_PAREN: "close-paren",
      LINE_COMMENT: "line-comment",
      BLOCK_COMMENT: "block-comment",
      NUMBER: "number",
      PLACEHOLDER: "placeholder"
    };
    exports["default"] = _default;
    module.exports = exports.default;
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/utils.js
var require_utils = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.sortByLengthDesc = exports.escapeRegExp = exports.isEmpty = exports.last = exports.trimSpacesEnd = void 0;
    var trimSpacesEnd = function trimSpacesEnd2(str) {
      return str.replace(/[\t ]+$/, "");
    };
    exports.trimSpacesEnd = trimSpacesEnd;
    var last = function last2(arr) {
      return arr[arr.length - 1];
    };
    exports.last = last;
    var isEmpty = function isEmpty2(arr) {
      return !Array.isArray(arr) || arr.length === 0;
    };
    exports.isEmpty = isEmpty;
    var escapeRegExp = function escapeRegExp2(string) {
      return string.replace(/[\$\(-\+\.\?\[-\^\{-\}]/g, "\\$&");
    };
    exports.escapeRegExp = escapeRegExp;
    var sortByLengthDesc = function sortByLengthDesc2(strings) {
      return strings.sort(function(a, b) {
        return b.length - a.length || a.localeCompare(b);
      });
    };
    exports.sortByLengthDesc = sortByLengthDesc;
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/core/Indentation.js
var require_Indentation = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/core/Indentation.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _utils = require_utils();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var INDENT_TYPE_TOP_LEVEL = "top-level";
    var INDENT_TYPE_BLOCK_LEVEL = "block-level";
    var Indentation = function() {
      function Indentation2(indent) {
        _classCallCheck(this, Indentation2);
        this.indent = indent || "  ";
        this.indentTypes = [];
      }
      _createClass(Indentation2, [{
        key: "getIndent",
        value: function getIndent() {
          return this.indent.repeat(this.indentTypes.length);
        }
      }, {
        key: "increaseTopLevel",
        value: function increaseTopLevel() {
          this.indentTypes.push(INDENT_TYPE_TOP_LEVEL);
        }
      }, {
        key: "increaseBlockLevel",
        value: function increaseBlockLevel() {
          this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);
        }
      }, {
        key: "decreaseTopLevel",
        value: function decreaseTopLevel() {
          if (this.indentTypes.length > 0 && (0, _utils.last)(this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {
            this.indentTypes.pop();
          }
        }
      }, {
        key: "decreaseBlockLevel",
        value: function decreaseBlockLevel() {
          while (this.indentTypes.length > 0) {
            var type = this.indentTypes.pop();
            if (type !== INDENT_TYPE_TOP_LEVEL) {
              break;
            }
          }
        }
      }, {
        key: "resetIndentation",
        value: function resetIndentation() {
          this.indentTypes = [];
        }
      }]);
      return Indentation2;
    }();
    exports["default"] = Indentation;
    module.exports = exports.default;
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/core/InlineBlock.js
var require_InlineBlock = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/core/InlineBlock.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _tokenTypes = _interopRequireDefault(require_tokenTypes());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var INLINE_MAX_LENGTH = 50;
    var InlineBlock = function() {
      function InlineBlock2() {
        _classCallCheck(this, InlineBlock2);
        this.level = 0;
      }
      _createClass(InlineBlock2, [{
        key: "beginIfPossible",
        value: function beginIfPossible(tokens, index) {
          if (this.level === 0 && this.isInlineBlock(tokens, index)) {
            this.level = 1;
          } else if (this.level > 0) {
            this.level++;
          } else {
            this.level = 0;
          }
        }
      }, {
        key: "end",
        value: function end() {
          this.level--;
        }
      }, {
        key: "isActive",
        value: function isActive() {
          return this.level > 0;
        }
      }, {
        key: "isInlineBlock",
        value: function isInlineBlock(tokens, index) {
          var length = 0;
          var level = 0;
          for (var i = index; i < tokens.length; i++) {
            var token = tokens[i];
            length += token.value.length;
            if (length > INLINE_MAX_LENGTH) {
              return false;
            }
            if (token.type === _tokenTypes["default"].OPEN_PAREN) {
              level++;
            } else if (token.type === _tokenTypes["default"].CLOSE_PAREN) {
              level--;
              if (level === 0) {
                return true;
              }
            }
            if (this.isForbiddenToken(token)) {
              return false;
            }
          }
          return false;
        }
      }, {
        key: "isForbiddenToken",
        value: function isForbiddenToken(_ref) {
          var type = _ref.type, value = _ref.value;
          return type === _tokenTypes["default"].RESERVED_TOP_LEVEL || type === _tokenTypes["default"].RESERVED_NEWLINE || type === _tokenTypes["default"].COMMENT || type === _tokenTypes["default"].BLOCK_COMMENT || value === ";";
        }
      }]);
      return InlineBlock2;
    }();
    exports["default"] = InlineBlock;
    module.exports = exports.default;
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/core/Params.js
var require_Params = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/core/Params.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Params = function() {
      function Params2(params) {
        _classCallCheck(this, Params2);
        this.params = params;
        this.index = 0;
      }
      _createClass(Params2, [{
        key: "get",
        value: function get(_ref) {
          var key = _ref.key, value = _ref.value;
          if (!this.params) {
            return value;
          }
          if (key) {
            return this.params[key];
          }
          return this.params[this.index++];
        }
      }]);
      return Params2;
    }();
    exports["default"] = Params;
    module.exports = exports.default;
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/core/token.js
var require_token = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/core/token.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isEnd = exports.isWindow = exports.isBy = exports.isSet = exports.isLimit = exports.isBetween = exports.isAnd = void 0;
    var _tokenTypes = _interopRequireDefault(require_tokenTypes());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var isToken = function isToken2(type, regex) {
      return function(token) {
        return (token === null || token === void 0 ? void 0 : token.type) === type && regex.test(token === null || token === void 0 ? void 0 : token.value);
      };
    };
    var isAnd = isToken(_tokenTypes["default"].RESERVED_NEWLINE, /^AND$/i);
    exports.isAnd = isAnd;
    var isBetween = isToken(_tokenTypes["default"].RESERVED, /^BETWEEN$/i);
    exports.isBetween = isBetween;
    var isLimit = isToken(_tokenTypes["default"].RESERVED_TOP_LEVEL, /^LIMIT$/i);
    exports.isLimit = isLimit;
    var isSet = isToken(_tokenTypes["default"].RESERVED_TOP_LEVEL, /^[S\u017F]ET$/i);
    exports.isSet = isSet;
    var isBy = isToken(_tokenTypes["default"].RESERVED, /^BY$/i);
    exports.isBy = isBy;
    var isWindow = isToken(_tokenTypes["default"].RESERVED_TOP_LEVEL, /^WINDOW$/i);
    exports.isWindow = isWindow;
    var isEnd = isToken(_tokenTypes["default"].CLOSE_PAREN, /^END$/i);
    exports.isEnd = isEnd;
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/core/Formatter.js
var require_Formatter = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/core/Formatter.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _tokenTypes = _interopRequireDefault(require_tokenTypes());
    var _Indentation = _interopRequireDefault(require_Indentation());
    var _InlineBlock = _interopRequireDefault(require_InlineBlock());
    var _Params = _interopRequireDefault(require_Params());
    var _utils = require_utils();
    var _token = require_token();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Formatter = function() {
      function Formatter2(cfg) {
        _classCallCheck(this, Formatter2);
        this.cfg = cfg;
        this.indentation = new _Indentation["default"](this.cfg.indent);
        this.inlineBlock = new _InlineBlock["default"]();
        this.params = new _Params["default"](this.cfg.params);
        this.previousReservedToken = {};
        this.tokens = [];
        this.index = 0;
      }
      _createClass(Formatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          throw new Error("tokenizer() not implemented by subclass");
        }
      }, {
        key: "tokenOverride",
        value: function tokenOverride(token) {
          return token;
        }
      }, {
        key: "format",
        value: function format(query) {
          this.tokens = this.tokenizer().tokenize(query);
          var formattedQuery = this.getFormattedQueryFromTokens();
          return formattedQuery.trim();
        }
      }, {
        key: "getFormattedQueryFromTokens",
        value: function getFormattedQueryFromTokens() {
          var _this = this;
          var formattedQuery = "";
          this.tokens.forEach(function(token, index) {
            _this.index = index;
            token = _this.tokenOverride(token);
            if (token.type === _tokenTypes["default"].LINE_COMMENT) {
              formattedQuery = _this.formatLineComment(token, formattedQuery);
            } else if (token.type === _tokenTypes["default"].BLOCK_COMMENT) {
              formattedQuery = _this.formatBlockComment(token, formattedQuery);
            } else if (token.type === _tokenTypes["default"].RESERVED_TOP_LEVEL) {
              formattedQuery = _this.formatTopLevelReservedWord(token, formattedQuery);
              _this.previousReservedToken = token;
            } else if (token.type === _tokenTypes["default"].RESERVED_TOP_LEVEL_NO_INDENT) {
              formattedQuery = _this.formatTopLevelReservedWordNoIndent(token, formattedQuery);
              _this.previousReservedToken = token;
            } else if (token.type === _tokenTypes["default"].RESERVED_NEWLINE) {
              formattedQuery = _this.formatNewlineReservedWord(token, formattedQuery);
              _this.previousReservedToken = token;
            } else if (token.type === _tokenTypes["default"].RESERVED) {
              formattedQuery = _this.formatWithSpaces(token, formattedQuery);
              _this.previousReservedToken = token;
            } else if (token.type === _tokenTypes["default"].OPEN_PAREN) {
              formattedQuery = _this.formatOpeningParentheses(token, formattedQuery);
            } else if (token.type === _tokenTypes["default"].CLOSE_PAREN) {
              formattedQuery = _this.formatClosingParentheses(token, formattedQuery);
            } else if (token.type === _tokenTypes["default"].PLACEHOLDER) {
              formattedQuery = _this.formatPlaceholder(token, formattedQuery);
            } else if (token.value === ",") {
              formattedQuery = _this.formatComma(token, formattedQuery);
            } else if (token.value === ":") {
              formattedQuery = _this.formatWithSpaceAfter(token, formattedQuery);
            } else if (token.value === ".") {
              formattedQuery = _this.formatWithoutSpaces(token, formattedQuery);
            } else if (token.value === ";") {
              formattedQuery = _this.formatQuerySeparator(token, formattedQuery);
            } else {
              formattedQuery = _this.formatWithSpaces(token, formattedQuery);
            }
          });
          return formattedQuery;
        }
      }, {
        key: "formatLineComment",
        value: function formatLineComment(token, query) {
          return this.addNewline(query + this.show(token));
        }
      }, {
        key: "formatBlockComment",
        value: function formatBlockComment(token, query) {
          return this.addNewline(this.addNewline(query) + this.indentComment(token.value));
        }
      }, {
        key: "indentComment",
        value: function indentComment(comment) {
          return comment.replace(/\n[\t ]*/g, "\n" + this.indentation.getIndent() + " ");
        }
      }, {
        key: "formatTopLevelReservedWordNoIndent",
        value: function formatTopLevelReservedWordNoIndent(token, query) {
          this.indentation.decreaseTopLevel();
          query = this.addNewline(query) + this.equalizeWhitespace(this.show(token));
          return this.addNewline(query);
        }
      }, {
        key: "formatTopLevelReservedWord",
        value: function formatTopLevelReservedWord(token, query) {
          this.indentation.decreaseTopLevel();
          query = this.addNewline(query);
          this.indentation.increaseTopLevel();
          query += this.equalizeWhitespace(this.show(token));
          return this.addNewline(query);
        }
      }, {
        key: "formatNewlineReservedWord",
        value: function formatNewlineReservedWord(token, query) {
          if ((0, _token.isAnd)(token) && (0, _token.isBetween)(this.tokenLookBehind(2))) {
            return this.formatWithSpaces(token, query);
          }
          return this.addNewline(query) + this.equalizeWhitespace(this.show(token)) + " ";
        }
      }, {
        key: "equalizeWhitespace",
        value: function equalizeWhitespace(string) {
          return string.replace(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+/g, " ");
        }
      }, {
        key: "formatOpeningParentheses",
        value: function formatOpeningParentheses(token, query) {
          var _preserveWhitespaceFo, _this$tokenLookBehind;
          var preserveWhitespaceFor = (_preserveWhitespaceFo = {}, _defineProperty(_preserveWhitespaceFo, _tokenTypes["default"].OPEN_PAREN, true), _defineProperty(_preserveWhitespaceFo, _tokenTypes["default"].LINE_COMMENT, true), _defineProperty(_preserveWhitespaceFo, _tokenTypes["default"].OPERATOR, true), _preserveWhitespaceFo);
          if (token.whitespaceBefore.length === 0 && !preserveWhitespaceFor[(_this$tokenLookBehind = this.tokenLookBehind()) === null || _this$tokenLookBehind === void 0 ? void 0 : _this$tokenLookBehind.type]) {
            query = (0, _utils.trimSpacesEnd)(query);
          }
          query += this.show(token);
          this.inlineBlock.beginIfPossible(this.tokens, this.index);
          if (!this.inlineBlock.isActive()) {
            this.indentation.increaseBlockLevel();
            query = this.addNewline(query);
          }
          return query;
        }
      }, {
        key: "formatClosingParentheses",
        value: function formatClosingParentheses(token, query) {
          if (this.inlineBlock.isActive()) {
            this.inlineBlock.end();
            return this.formatWithSpaceAfter(token, query);
          } else {
            this.indentation.decreaseBlockLevel();
            return this.formatWithSpaces(token, this.addNewline(query));
          }
        }
      }, {
        key: "formatPlaceholder",
        value: function formatPlaceholder(token, query) {
          return query + this.params.get(token) + " ";
        }
      }, {
        key: "formatComma",
        value: function formatComma(token, query) {
          query = (0, _utils.trimSpacesEnd)(query) + this.show(token) + " ";
          if (this.inlineBlock.isActive()) {
            return query;
          } else if ((0, _token.isLimit)(this.previousReservedToken)) {
            return query;
          } else {
            return this.addNewline(query);
          }
        }
      }, {
        key: "formatWithSpaceAfter",
        value: function formatWithSpaceAfter(token, query) {
          return (0, _utils.trimSpacesEnd)(query) + this.show(token) + " ";
        }
      }, {
        key: "formatWithoutSpaces",
        value: function formatWithoutSpaces(token, query) {
          return (0, _utils.trimSpacesEnd)(query) + this.show(token);
        }
      }, {
        key: "formatWithSpaces",
        value: function formatWithSpaces(token, query) {
          return query + this.show(token) + " ";
        }
      }, {
        key: "formatQuerySeparator",
        value: function formatQuerySeparator(token, query) {
          this.indentation.resetIndentation();
          return (0, _utils.trimSpacesEnd)(query) + this.show(token) + "\n".repeat(this.cfg.linesBetweenQueries || 1);
        }
      }, {
        key: "show",
        value: function show(_ref) {
          var type = _ref.type, value = _ref.value;
          if (this.cfg.uppercase && (type === _tokenTypes["default"].RESERVED || type === _tokenTypes["default"].RESERVED_TOP_LEVEL || type === _tokenTypes["default"].RESERVED_TOP_LEVEL_NO_INDENT || type === _tokenTypes["default"].RESERVED_NEWLINE || type === _tokenTypes["default"].OPEN_PAREN || type === _tokenTypes["default"].CLOSE_PAREN)) {
            return value.toUpperCase();
          } else {
            return value;
          }
        }
      }, {
        key: "addNewline",
        value: function addNewline(query) {
          query = (0, _utils.trimSpacesEnd)(query);
          if (!query.endsWith("\n")) {
            query += "\n";
          }
          return query + this.indentation.getIndent();
        }
      }, {
        key: "tokenLookBehind",
        value: function tokenLookBehind() {
          var n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
          return this.tokens[this.index - n];
        }
      }, {
        key: "tokenLookAhead",
        value: function tokenLookAhead() {
          var n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
          return this.tokens[this.index + n];
        }
      }]);
      return Formatter2;
    }();
    exports["default"] = Formatter;
    module.exports = exports.default;
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/core/regexFactory.js
var require_regexFactory = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/core/regexFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createOperatorRegex = createOperatorRegex;
    exports.createLineCommentRegex = createLineCommentRegex;
    exports.createReservedWordRegex = createReservedWordRegex;
    exports.createWordRegex = createWordRegex;
    exports.createStringRegex = createStringRegex;
    exports.createStringPattern = createStringPattern;
    exports.createParenRegex = createParenRegex;
    exports.createPlaceholderRegex = createPlaceholderRegex;
    var _utils = require_utils();
    function createOperatorRegex(multiLetterOperators) {
      return new RegExp("^(".concat((0, _utils.sortByLengthDesc)(multiLetterOperators).map(_utils.escapeRegExp).join("|"), "|.)"), "u");
    }
    function createLineCommentRegex(lineCommentTypes) {
      return new RegExp("^((?:".concat(lineCommentTypes.map(function(c) {
        return (0, _utils.escapeRegExp)(c);
      }).join("|"), ").*?)(?:\r\n|\r|\n|$)"), "u");
    }
    function createReservedWordRegex(reservedWords) {
      if (reservedWords.length === 0) {
        return new RegExp("^\b$", "u");
      }
      var reservedWordsPattern = (0, _utils.sortByLengthDesc)(reservedWords).join("|").replace(/ /g, "\\s+");
      return new RegExp("^(".concat(reservedWordsPattern, ")\\b"), "iu");
    }
    function createWordRegex() {
      var specialChars = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      return new RegExp("^([\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Connector_Punctuation}\\p{Join_Control}".concat(specialChars.join(""), "]+)"), "u");
    }
    function createStringRegex(stringTypes) {
      return new RegExp("^(" + createStringPattern(stringTypes) + ")", "u");
    }
    function createStringPattern(stringTypes) {
      var patterns = {
        "``": "((`[^`]*($|`))+)",
        "{}": "((\\{[^\\}]*($|\\}))+)",
        "[]": "((\\[[^\\]]*($|\\]))(\\][^\\]]*($|\\]))*)",
        '""': '(("[^"\\\\]*(?:\\\\.[^"\\\\]*)*("|$))+)',
        "''": "(('[^'\\\\]*(?:\\\\.[^'\\\\]*)*('|$))+)",
        "N''": "((N'[^'\\\\]*(?:\\\\.[^'\\\\]*)*('|$))+)",
        "U&''": "((U&'[^'\\\\]*(?:\\\\.[^'\\\\]*)*('|$))+)",
        'U&""': '((U&"[^"\\\\]*(?:\\\\.[^"\\\\]*)*("|$))+)',
        $$: "((?<tag>\\$\\w*\\$)[\\s\\S]*?(?:\\k<tag>|$))"
      };
      return stringTypes.map(function(t) {
        return patterns[t];
      }).join("|");
    }
    function createParenRegex(parens) {
      return new RegExp("^(" + parens.map(escapeParen).join("|") + ")", "iu");
    }
    function escapeParen(paren) {
      if (paren.length === 1) {
        return (0, _utils.escapeRegExp)(paren);
      } else {
        return "\\b" + paren + "\\b";
      }
    }
    function createPlaceholderRegex(types, pattern) {
      if ((0, _utils.isEmpty)(types)) {
        return false;
      }
      var typesRegex = types.map(_utils.escapeRegExp).join("|");
      return new RegExp("^((?:".concat(typesRegex, ")(?:").concat(pattern, "))"), "u");
    }
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/core/Tokenizer.js
var require_Tokenizer = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/core/Tokenizer.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _tokenTypes = _interopRequireDefault(require_tokenTypes());
    var regexFactory = _interopRequireWildcard(require_regexFactory());
    var _utils = require_utils();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function")
        return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Tokenizer = function() {
      function Tokenizer2(cfg) {
        _classCallCheck(this, Tokenizer2);
        this.WHITESPACE_REGEX = /^([\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+)/;
        this.NUMBER_REGEX = /^((\x2D[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*)?[0-9]+(\.[0-9]+)?([Ee]\x2D?[0-9]+(\.[0-9]+)?)?|0x[0-9A-Fa-f]+|0b[01]+)\b/;
        this.OPERATOR_REGEX = regexFactory.createOperatorRegex(["<>", "<=", ">="].concat(_toConsumableArray(cfg.operators || [])));
        this.BLOCK_COMMENT_REGEX = /^(\/\*(?:(?![])[\s\S])*?(?:\*\/|$))/;
        this.LINE_COMMENT_REGEX = regexFactory.createLineCommentRegex(cfg.lineCommentTypes);
        this.RESERVED_TOP_LEVEL_REGEX = regexFactory.createReservedWordRegex(cfg.reservedTopLevelWords);
        this.RESERVED_TOP_LEVEL_NO_INDENT_REGEX = regexFactory.createReservedWordRegex(cfg.reservedTopLevelWordsNoIndent);
        this.RESERVED_NEWLINE_REGEX = regexFactory.createReservedWordRegex(cfg.reservedNewlineWords);
        this.RESERVED_PLAIN_REGEX = regexFactory.createReservedWordRegex(cfg.reservedWords);
        this.WORD_REGEX = regexFactory.createWordRegex(cfg.specialWordChars);
        this.STRING_REGEX = regexFactory.createStringRegex(cfg.stringTypes);
        this.OPEN_PAREN_REGEX = regexFactory.createParenRegex(cfg.openParens);
        this.CLOSE_PAREN_REGEX = regexFactory.createParenRegex(cfg.closeParens);
        this.INDEXED_PLACEHOLDER_REGEX = regexFactory.createPlaceholderRegex(cfg.indexedPlaceholderTypes, "[0-9]*");
        this.IDENT_NAMED_PLACEHOLDER_REGEX = regexFactory.createPlaceholderRegex(cfg.namedPlaceholderTypes, "[a-zA-Z0-9._$]+");
        this.STRING_NAMED_PLACEHOLDER_REGEX = regexFactory.createPlaceholderRegex(cfg.namedPlaceholderTypes, regexFactory.createStringPattern(cfg.stringTypes));
      }
      _createClass(Tokenizer2, [{
        key: "tokenize",
        value: function tokenize(input) {
          var tokens = [];
          var token;
          while (input.length) {
            var whitespaceBefore = this.getWhitespace(input);
            input = input.substring(whitespaceBefore.length);
            if (input.length) {
              token = this.getNextToken(input, token);
              input = input.substring(token.value.length);
              tokens.push(_objectSpread(_objectSpread({}, token), {}, {
                whitespaceBefore
              }));
            }
          }
          return tokens;
        }
      }, {
        key: "getWhitespace",
        value: function getWhitespace(input) {
          var matches = input.match(this.WHITESPACE_REGEX);
          return matches ? matches[1] : "";
        }
      }, {
        key: "getNextToken",
        value: function getNextToken(input, previousToken) {
          return this.getCommentToken(input) || this.getStringToken(input) || this.getOpenParenToken(input) || this.getCloseParenToken(input) || this.getPlaceholderToken(input) || this.getNumberToken(input) || this.getReservedWordToken(input, previousToken) || this.getWordToken(input) || this.getOperatorToken(input);
        }
      }, {
        key: "getCommentToken",
        value: function getCommentToken(input) {
          return this.getLineCommentToken(input) || this.getBlockCommentToken(input);
        }
      }, {
        key: "getLineCommentToken",
        value: function getLineCommentToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].LINE_COMMENT,
            regex: this.LINE_COMMENT_REGEX
          });
        }
      }, {
        key: "getBlockCommentToken",
        value: function getBlockCommentToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].BLOCK_COMMENT,
            regex: this.BLOCK_COMMENT_REGEX
          });
        }
      }, {
        key: "getStringToken",
        value: function getStringToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].STRING,
            regex: this.STRING_REGEX
          });
        }
      }, {
        key: "getOpenParenToken",
        value: function getOpenParenToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].OPEN_PAREN,
            regex: this.OPEN_PAREN_REGEX
          });
        }
      }, {
        key: "getCloseParenToken",
        value: function getCloseParenToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].CLOSE_PAREN,
            regex: this.CLOSE_PAREN_REGEX
          });
        }
      }, {
        key: "getPlaceholderToken",
        value: function getPlaceholderToken(input) {
          return this.getIdentNamedPlaceholderToken(input) || this.getStringNamedPlaceholderToken(input) || this.getIndexedPlaceholderToken(input);
        }
      }, {
        key: "getIdentNamedPlaceholderToken",
        value: function getIdentNamedPlaceholderToken(input) {
          return this.getPlaceholderTokenWithKey({
            input,
            regex: this.IDENT_NAMED_PLACEHOLDER_REGEX,
            parseKey: function parseKey(v) {
              return v.slice(1);
            }
          });
        }
      }, {
        key: "getStringNamedPlaceholderToken",
        value: function getStringNamedPlaceholderToken(input) {
          var _this = this;
          return this.getPlaceholderTokenWithKey({
            input,
            regex: this.STRING_NAMED_PLACEHOLDER_REGEX,
            parseKey: function parseKey(v) {
              return _this.getEscapedPlaceholderKey({
                key: v.slice(2, -1),
                quoteChar: v.slice(-1)
              });
            }
          });
        }
      }, {
        key: "getIndexedPlaceholderToken",
        value: function getIndexedPlaceholderToken(input) {
          return this.getPlaceholderTokenWithKey({
            input,
            regex: this.INDEXED_PLACEHOLDER_REGEX,
            parseKey: function parseKey(v) {
              return v.slice(1);
            }
          });
        }
      }, {
        key: "getPlaceholderTokenWithKey",
        value: function getPlaceholderTokenWithKey(_ref) {
          var input = _ref.input, regex = _ref.regex, parseKey = _ref.parseKey;
          var token = this.getTokenOnFirstMatch({
            input,
            regex,
            type: _tokenTypes["default"].PLACEHOLDER
          });
          if (token) {
            token.key = parseKey(token.value);
          }
          return token;
        }
      }, {
        key: "getEscapedPlaceholderKey",
        value: function getEscapedPlaceholderKey(_ref2) {
          var key = _ref2.key, quoteChar = _ref2.quoteChar;
          return key.replace(new RegExp((0, _utils.escapeRegExp)("\\" + quoteChar), "gu"), quoteChar);
        }
      }, {
        key: "getNumberToken",
        value: function getNumberToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].NUMBER,
            regex: this.NUMBER_REGEX
          });
        }
      }, {
        key: "getOperatorToken",
        value: function getOperatorToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].OPERATOR,
            regex: this.OPERATOR_REGEX
          });
        }
      }, {
        key: "getReservedWordToken",
        value: function getReservedWordToken(input, previousToken) {
          if (previousToken && previousToken.value && previousToken.value === ".") {
            return void 0;
          }
          return this.getTopLevelReservedToken(input) || this.getNewlineReservedToken(input) || this.getTopLevelReservedTokenNoIndent(input) || this.getPlainReservedToken(input);
        }
      }, {
        key: "getTopLevelReservedToken",
        value: function getTopLevelReservedToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].RESERVED_TOP_LEVEL,
            regex: this.RESERVED_TOP_LEVEL_REGEX
          });
        }
      }, {
        key: "getNewlineReservedToken",
        value: function getNewlineReservedToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].RESERVED_NEWLINE,
            regex: this.RESERVED_NEWLINE_REGEX
          });
        }
      }, {
        key: "getTopLevelReservedTokenNoIndent",
        value: function getTopLevelReservedTokenNoIndent(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].RESERVED_TOP_LEVEL_NO_INDENT,
            regex: this.RESERVED_TOP_LEVEL_NO_INDENT_REGEX
          });
        }
      }, {
        key: "getPlainReservedToken",
        value: function getPlainReservedToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].RESERVED,
            regex: this.RESERVED_PLAIN_REGEX
          });
        }
      }, {
        key: "getWordToken",
        value: function getWordToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].WORD,
            regex: this.WORD_REGEX
          });
        }
      }, {
        key: "getTokenOnFirstMatch",
        value: function getTokenOnFirstMatch(_ref3) {
          var input = _ref3.input, type = _ref3.type, regex = _ref3.regex;
          var matches = input.match(regex);
          return matches ? {
            type,
            value: matches[1]
          } : void 0;
        }
      }]);
      return Tokenizer2;
    }();
    exports["default"] = Tokenizer;
    module.exports = exports.default;
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/Db2Formatter.js
var require_Db2Formatter = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/Db2Formatter.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["ABS", "ACTIVATE", "ALIAS", "ALL", "ALLOCATE", "ALLOW", "ALTER", "ANY", "ARE", "ARRAY", "AS", "ASC", "ASENSITIVE", "ASSOCIATE", "ASUTIME", "ASYMMETRIC", "AT", "ATOMIC", "ATTRIBUTES", "AUDIT", "AUTHORIZATION", "AUX", "AUXILIARY", "AVG", "BEFORE", "BEGIN", "BETWEEN", "BIGINT", "BINARY", "BLOB", "BOOLEAN", "BOTH", "BUFFERPOOL", "BY", "CACHE", "CALL", "CALLED", "CAPTURE", "CARDINALITY", "CASCADED", "CASE", "CAST", "CCSID", "CEIL", "CEILING", "CHAR", "CHARACTER", "CHARACTER_LENGTH", "CHAR_LENGTH", "CHECK", "CLOB", "CLONE", "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLECT", "COLLECTION", "COLLID", "COLUMN", "COMMENT", "COMMIT", "CONCAT", "CONDITION", "CONNECT", "CONNECTION", "CONSTRAINT", "CONTAINS", "CONTINUE", "CONVERT", "CORR", "CORRESPONDING", "COUNT", "COUNT_BIG", "COVAR_POP", "COVAR_SAMP", "CREATE", "CROSS", "CUBE", "CUME_DIST", "CURRENT", "CURRENT_DATE", "CURRENT_DEFAULT_TRANSFORM_GROUP", "CURRENT_LC_CTYPE", "CURRENT_PATH", "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_SERVER", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_TIMEZONE", "CURRENT_TRANSFORM_GROUP_FOR_TYPE", "CURRENT_USER", "CURSOR", "CYCLE", "DATA", "DATABASE", "DATAPARTITIONNAME", "DATAPARTITIONNUM", "DATE", "DAY", "DAYS", "DB2GENERAL", "DB2GENRL", "DB2SQL", "DBINFO", "DBPARTITIONNAME", "DBPARTITIONNUM", "DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DEFAULTS", "DEFINITION", "DELETE", "DENSERANK", "DENSE_RANK", "DEREF", "DESCRIBE", "DESCRIPTOR", "DETERMINISTIC", "DIAGNOSTICS", "DISABLE", "DISALLOW", "DISCONNECT", "DISTINCT", "DO", "DOCUMENT", "DOUBLE", "DROP", "DSSIZE", "DYNAMIC", "EACH", "EDITPROC", "ELEMENT", "ELSE", "ELSEIF", "ENABLE", "ENCODING", "ENCRYPTION", "END", "END-EXEC", "ENDING", "ERASE", "ESCAPE", "EVERY", "EXCEPTION", "EXCLUDING", "EXCLUSIVE", "EXEC", "EXECUTE", "EXISTS", "EXIT", "EXP", "EXPLAIN", "EXTENDED", "EXTERNAL", "EXTRACT", "FALSE", "FENCED", "FETCH", "FIELDPROC", "FILE", "FILTER", "FINAL", "FIRST", "FLOAT", "FLOOR", "FOR", "FOREIGN", "FREE", "FULL", "FUNCTION", "FUSION", "GENERAL", "GENERATED", "GET", "GLOBAL", "GOTO", "GRANT", "GRAPHIC", "GROUP", "GROUPING", "HANDLER", "HASH", "HASHED_VALUE", "HINT", "HOLD", "HOUR", "HOURS", "IDENTITY", "IF", "IMMEDIATE", "IN", "INCLUDING", "INCLUSIVE", "INCREMENT", "INDEX", "INDICATOR", "INDICATORS", "INF", "INFINITY", "INHERIT", "INNER", "INOUT", "INSENSITIVE", "INSERT", "INT", "INTEGER", "INTEGRITY", "INTERSECTION", "INTERVAL", "INTO", "IS", "ISOBID", "ISOLATION", "ITERATE", "JAR", "JAVA", "KEEP", "KEY", "LABEL", "LANGUAGE", "LARGE", "LATERAL", "LC_CTYPE", "LEADING", "LEAVE", "LEFT", "LIKE", "LINKTYPE", "LN", "LOCAL", "LOCALDATE", "LOCALE", "LOCALTIME", "LOCALTIMESTAMP", "LOCATOR", "LOCATORS", "LOCK", "LOCKMAX", "LOCKSIZE", "LONG", "LOOP", "LOWER", "MAINTAINED", "MATCH", "MATERIALIZED", "MAX", "MAXVALUE", "MEMBER", "MERGE", "METHOD", "MICROSECOND", "MICROSECONDS", "MIN", "MINUTE", "MINUTES", "MINVALUE", "MOD", "MODE", "MODIFIES", "MODULE", "MONTH", "MONTHS", "MULTISET", "NAN", "NATIONAL", "NATURAL", "NCHAR", "NCLOB", "NEW", "NEW_TABLE", "NEXTVAL", "NO", "NOCACHE", "NOCYCLE", "NODENAME", "NODENUMBER", "NOMAXVALUE", "NOMINVALUE", "NONE", "NOORDER", "NORMALIZE", "NORMALIZED", "NOT", "NULL", "NULLIF", "NULLS", "NUMERIC", "NUMPARTS", "OBID", "OCTET_LENGTH", "OF", "OFFSET", "OLD", "OLD_TABLE", "ON", "ONLY", "OPEN", "OPTIMIZATION", "OPTIMIZE", "OPTION", "ORDER", "OUT", "OUTER", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "PACKAGE", "PADDED", "PAGESIZE", "PARAMETER", "PART", "PARTITION", "PARTITIONED", "PARTITIONING", "PARTITIONS", "PASSWORD", "PATH", "PERCENTILE_CONT", "PERCENTILE_DISC", "PERCENT_RANK", "PIECESIZE", "PLAN", "POSITION", "POWER", "PRECISION", "PREPARE", "PREVVAL", "PRIMARY", "PRIQTY", "PRIVILEGES", "PROCEDURE", "PROGRAM", "PSID", "PUBLIC", "QUERY", "QUERYNO", "RANGE", "RANK", "READ", "READS", "REAL", "RECOVERY", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", "REGR_SXY", "REGR_SYY", "RELEASE", "RENAME", "REPEAT", "RESET", "RESIGNAL", "RESTART", "RESTRICT", "RESULT", "RESULT_SET_LOCATOR", "RETURN", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROUND_CEILING", "ROUND_DOWN", "ROUND_FLOOR", "ROUND_HALF_DOWN", "ROUND_HALF_EVEN", "ROUND_HALF_UP", "ROUND_UP", "ROUTINE", "ROW", "ROWNUMBER", "ROWS", "ROWSET", "ROW_NUMBER", "RRN", "RUN", "SAVEPOINT", "SCHEMA", "SCOPE", "SCRATCHPAD", "SCROLL", "SEARCH", "SECOND", "SECONDS", "SECQTY", "SECURITY", "SENSITIVE", "SEQUENCE", "SESSION", "SESSION_USER", "SIGNAL", "SIMILAR", "SIMPLE", "SMALLINT", "SNAN", "SOME", "SOURCE", "SPECIFIC", "SPECIFICTYPE", "SQL", "SQLEXCEPTION", "SQLID", "SQLSTATE", "SQLWARNING", "SQRT", "STACKED", "STANDARD", "START", "STARTING", "STATEMENT", "STATIC", "STATMENT", "STAY", "STDDEV_POP", "STDDEV_SAMP", "STOGROUP", "STORES", "STYLE", "SUBMULTISET", "SUBSTRING", "SUM", "SUMMARY", "SYMMETRIC", "SYNONYM", "SYSFUN", "SYSIBM", "SYSPROC", "SYSTEM", "SYSTEM_USER", "TABLE", "TABLESAMPLE", "TABLESPACE", "THEN", "TIME", "TIMESTAMP", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TO", "TRAILING", "TRANSACTION", "TRANSLATE", "TRANSLATION", "TREAT", "TRIGGER", "TRIM", "TRUE", "TRUNCATE", "TYPE", "UESCAPE", "UNDO", "UNIQUE", "UNKNOWN", "UNNEST", "UNTIL", "UPPER", "USAGE", "USER", "USING", "VALIDPROC", "VALUE", "VARCHAR", "VARIABLE", "VARIANT", "VARYING", "VAR_POP", "VAR_SAMP", "VCAT", "VERSION", "VIEW", "VOLATILE", "VOLUMES", "WHEN", "WHENEVER", "WHILE", "WIDTH_BUCKET", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WLM", "WRITE", "XMLELEMENT", "XMLEXISTS", "XMLNAMESPACES", "YEAR", "YEARS"];
    var reservedTopLevelWords = ["ADD", "AFTER", "ALTER COLUMN", "ALTER TABLE", "DELETE FROM", "EXCEPT", "FETCH FIRST", "FROM", "GROUP BY", "GO", "HAVING", "INSERT INTO", "INTERSECT", "LIMIT", "ORDER BY", "SELECT", "SET CURRENT SCHEMA", "SET SCHEMA", "SET", "UPDATE", "VALUES", "WHERE"];
    var reservedTopLevelWordsNoIndent = ["INTERSECT", "INTERSECT ALL", "MINUS", "UNION", "UNION ALL"];
    var reservedNewlineWords = [
      "AND",
      "OR",
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN",
      "FULL JOIN",
      "FULL OUTER JOIN",
      "CROSS JOIN",
      "NATURAL JOIN"
    ];
    var Db2Formatter = function(_Formatter) {
      _inherits(Db2Formatter2, _Formatter);
      var _super = _createSuper(Db2Formatter2);
      function Db2Formatter2() {
        _classCallCheck(this, Db2Formatter2);
        return _super.apply(this, arguments);
      }
      _createClass(Db2Formatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ['""', "''", "``", "[]"],
            openParens: ["("],
            closeParens: [")"],
            indexedPlaceholderTypes: ["?"],
            namedPlaceholderTypes: [":"],
            lineCommentTypes: ["--"],
            specialWordChars: ["#", "@"],
            operators: ["**", "!=", "!>", "!>", "||"]
          });
        }
      }]);
      return Db2Formatter2;
    }(_Formatter2["default"]);
    exports["default"] = Db2Formatter;
    module.exports = exports.default;
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/MariaDbFormatter.js
var require_MariaDbFormatter = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/MariaDbFormatter.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["ACCESSIBLE", "ADD", "ALL", "ALTER", "ANALYZE", "AND", "AS", "ASC", "ASENSITIVE", "BEFORE", "BETWEEN", "BIGINT", "BINARY", "BLOB", "BOTH", "BY", "CALL", "CASCADE", "CASE", "CHANGE", "CHAR", "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", "DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", "DAY_SECOND", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", "DISTINCT", "DISTINCTROW", "DIV", "DO_DOMAIN_IDS", "DOUBLE", "DROP", "DUAL", "EACH", "ELSE", "ELSEIF", "ENCLOSED", "ESCAPED", "EXCEPT", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FLOAT", "FLOAT4", "FLOAT8", "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", "GENERAL", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", "HOUR_MICROSECOND", "HOUR_MINUTE", "HOUR_SECOND", "IF", "IGNORE", "IGNORE_DOMAIN_IDS", "IGNORE_SERVER_IDS", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSENSITIVE", "INSERT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCALTIME", "LOCALTIMESTAMP", "LOCK", "LONG", "LONGBLOB", "LONGTEXT", "LOOP", "LOW_PRIORITY", "MASTER_HEARTBEAT_PERIOD", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MIDDLEINT", "MINUTE_MICROSECOND", "MINUTE_SECOND", "MOD", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NULL", "NUMERIC", "ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", "OUTFILE", "OVER", "PAGE_CHECKSUM", "PARSE_VCOL_EXPR", "PARTITION", "POSITION", "PRECISION", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", "READS", "READ_WRITE", "REAL", "RECURSIVE", "REF_SYSTEM_ID", "REFERENCES", "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", "RETURN", "RETURNING", "REVOKE", "RIGHT", "RLIKE", "ROWS", "SCHEMA", "SCHEMAS", "SECOND_MICROSECOND", "SELECT", "SENSITIVE", "SEPARATOR", "SET", "SHOW", "SIGNAL", "SLOW", "SMALLINT", "SPATIAL", "SPECIFIC", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SSL", "STARTING", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", "STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TINYBLOB", "TINYINT", "TINYTEXT", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "VALUES", "VARBINARY", "VARCHAR", "VARCHARACTER", "VARYING", "WHEN", "WHERE", "WHILE", "WINDOW", "WITH", "WRITE", "XOR", "YEAR_MONTH", "ZEROFILL"];
    var reservedTopLevelWords = ["ADD", "ALTER COLUMN", "ALTER TABLE", "DELETE FROM", "EXCEPT", "FROM", "GROUP BY", "HAVING", "INSERT INTO", "INSERT", "LIMIT", "ORDER BY", "SELECT", "SET", "UPDATE", "VALUES", "WHERE"];
    var reservedTopLevelWordsNoIndent = ["INTERSECT", "INTERSECT ALL", "UNION", "UNION ALL"];
    var reservedNewlineWords = [
      "AND",
      "ELSE",
      "OR",
      "WHEN",
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN",
      "CROSS JOIN",
      "NATURAL JOIN",
      "STRAIGHT_JOIN",
      "NATURAL LEFT JOIN",
      "NATURAL LEFT OUTER JOIN",
      "NATURAL RIGHT JOIN",
      "NATURAL RIGHT OUTER JOIN"
    ];
    var MariaDbFormatter = function(_Formatter) {
      _inherits(MariaDbFormatter2, _Formatter);
      var _super = _createSuper(MariaDbFormatter2);
      function MariaDbFormatter2() {
        _classCallCheck(this, MariaDbFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(MariaDbFormatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ["``", "''", '""'],
            openParens: ["(", "CASE"],
            closeParens: [")", "END"],
            indexedPlaceholderTypes: ["?"],
            namedPlaceholderTypes: [],
            lineCommentTypes: ["--", "#"],
            specialWordChars: ["@"],
            operators: [":=", "<<", ">>", "!=", "<>", "<=>", "&&", "||"]
          });
        }
      }]);
      return MariaDbFormatter2;
    }(_Formatter2["default"]);
    exports["default"] = MariaDbFormatter;
    module.exports = exports.default;
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/MySqlFormatter.js
var require_MySqlFormatter = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/MySqlFormatter.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["ACCESSIBLE", "ADD", "ALL", "ALTER", "ANALYZE", "AND", "AS", "ASC", "ASENSITIVE", "BEFORE", "BETWEEN", "BIGINT", "BINARY", "BLOB", "BOTH", "BY", "CALL", "CASCADE", "CASE", "CHANGE", "CHAR", "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CUBE", "CUME_DIST", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", "DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", "DAY_SECOND", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DENSE_RANK", "DESC", "DESCRIBE", "DETERMINISTIC", "DISTINCT", "DISTINCTROW", "DIV", "DOUBLE", "DROP", "DUAL", "EACH", "ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", "EXCEPT", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FIRST_VALUE", "FLOAT", "FLOAT4", "FLOAT8", "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", "FUNCTION", "GENERATED", "GET", "GRANT", "GROUP", "GROUPING", "GROUPS", "HAVING", "HIGH_PRIORITY", "HOUR_MICROSECOND", "HOUR_MINUTE", "HOUR_SECOND", "IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSENSITIVE", "INSERT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", "INTERVAL", "INTO", "IO_AFTER_GTIDS", "IO_BEFORE_GTIDS", "IS", "ITERATE", "JOIN", "JSON_TABLE", "KEY", "KEYS", "KILL", "LAG", "LAST_VALUE", "LATERAL", "LEAD", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCALTIME", "LOCALTIMESTAMP", "LOCK", "LONG", "LONGBLOB", "LONGTEXT", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MIDDLEINT", "MINUTE_MICROSECOND", "MINUTE_SECOND", "MOD", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NTH_VALUE", "NTILE", "NULL", "NUMERIC", "OF", "ON", "OPTIMIZE", "OPTIMIZER_COSTS", "OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", "OUTFILE", "OVER", "PARTITION", "PERCENT_RANK", "PRECISION", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "RANK", "READ", "READS", "READ_WRITE", "REAL", "RECURSIVE", "REFERENCES", "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", "RETURN", "REVOKE", "RIGHT", "RLIKE", "ROW", "ROWS", "ROW_NUMBER", "SCHEMA", "SCHEMAS", "SECOND_MICROSECOND", "SELECT", "SENSITIVE", "SEPARATOR", "SET", "SHOW", "SIGNAL", "SMALLINT", "SPATIAL", "SPECIFIC", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SSL", "STARTING", "STORED", "STRAIGHT_JOIN", "SYSTEM", "TABLE", "TERMINATED", "THEN", "TINYBLOB", "TINYINT", "TINYTEXT", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "VALUES", "VARBINARY", "VARCHAR", "VARCHARACTER", "VARYING", "VIRTUAL", "WHEN", "WHERE", "WHILE", "WINDOW", "WITH", "WRITE", "XOR", "YEAR_MONTH", "ZEROFILL"];
    var reservedTopLevelWords = ["ADD", "ALTER COLUMN", "ALTER TABLE", "DELETE FROM", "EXCEPT", "FROM", "GROUP BY", "HAVING", "INSERT INTO", "INSERT", "LIMIT", "ORDER BY", "SELECT", "SET", "UPDATE", "VALUES", "WHERE"];
    var reservedTopLevelWordsNoIndent = ["INTERSECT", "INTERSECT ALL", "UNION", "UNION ALL"];
    var reservedNewlineWords = [
      "AND",
      "ELSE",
      "OR",
      "WHEN",
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN",
      "CROSS JOIN",
      "NATURAL JOIN",
      "STRAIGHT_JOIN",
      "NATURAL LEFT JOIN",
      "NATURAL LEFT OUTER JOIN",
      "NATURAL RIGHT JOIN",
      "NATURAL RIGHT OUTER JOIN"
    ];
    var MySqlFormatter = function(_Formatter) {
      _inherits(MySqlFormatter2, _Formatter);
      var _super = _createSuper(MySqlFormatter2);
      function MySqlFormatter2() {
        _classCallCheck(this, MySqlFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(MySqlFormatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ["``", "''", '""'],
            openParens: ["(", "CASE"],
            closeParens: [")", "END"],
            indexedPlaceholderTypes: ["?"],
            namedPlaceholderTypes: [],
            lineCommentTypes: ["--", "#"],
            specialWordChars: ["@"],
            operators: [":=", "<<", ">>", "!=", "<>", "<=>", "&&", "||", "->", "->>"]
          });
        }
      }]);
      return MySqlFormatter2;
    }(_Formatter2["default"]);
    exports["default"] = MySqlFormatter;
    module.exports = exports.default;
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/N1qlFormatter.js
var require_N1qlFormatter = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/N1qlFormatter.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["ALL", "ALTER", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "BEGIN", "BETWEEN", "BINARY", "BOOLEAN", "BREAK", "BUCKET", "BUILD", "BY", "CALL", "CASE", "CAST", "CLUSTER", "COLLATE", "COLLECTION", "COMMIT", "CONNECT", "CONTINUE", "CORRELATE", "COVER", "CREATE", "DATABASE", "DATASET", "DATASTORE", "DECLARE", "DECREMENT", "DELETE", "DERIVED", "DESC", "DESCRIBE", "DISTINCT", "DO", "DROP", "EACH", "ELEMENT", "ELSE", "END", "EVERY", "EXCEPT", "EXCLUDE", "EXECUTE", "EXISTS", "EXPLAIN", "FALSE", "FETCH", "FIRST", "FLATTEN", "FOR", "FORCE", "FROM", "FUNCTION", "GRANT", "GROUP", "GSI", "HAVING", "IF", "IGNORE", "ILIKE", "IN", "INCLUDE", "INCREMENT", "INDEX", "INFER", "INLINE", "INNER", "INSERT", "INTERSECT", "INTO", "IS", "JOIN", "KEY", "KEYS", "KEYSPACE", "KNOWN", "LAST", "LEFT", "LET", "LETTING", "LIKE", "LIMIT", "LSM", "MAP", "MAPPING", "MATCHED", "MATERIALIZED", "MERGE", "MISSING", "NAMESPACE", "NEST", "NOT", "NULL", "NUMBER", "OBJECT", "OFFSET", "ON", "OPTION", "OR", "ORDER", "OUTER", "OVER", "PARSE", "PARTITION", "PASSWORD", "PATH", "POOL", "PREPARE", "PRIMARY", "PRIVATE", "PRIVILEGE", "PROCEDURE", "PUBLIC", "RAW", "REALM", "REDUCE", "RENAME", "RETURN", "RETURNING", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "SATISFIES", "SCHEMA", "SELECT", "SELF", "SEMI", "SET", "SHOW", "SOME", "START", "STATISTICS", "STRING", "SYSTEM", "THEN", "TO", "TRANSACTION", "TRIGGER", "TRUE", "TRUNCATE", "UNDER", "UNION", "UNIQUE", "UNKNOWN", "UNNEST", "UNSET", "UPDATE", "UPSERT", "USE", "USER", "USING", "VALIDATE", "VALUE", "VALUED", "VALUES", "VIA", "VIEW", "WHEN", "WHERE", "WHILE", "WITH", "WITHIN", "WORK", "XOR"];
    var reservedTopLevelWords = ["DELETE FROM", "EXCEPT ALL", "EXCEPT", "EXPLAIN DELETE FROM", "EXPLAIN UPDATE", "EXPLAIN UPSERT", "FROM", "GROUP BY", "HAVING", "INFER", "INSERT INTO", "LET", "LIMIT", "MERGE", "NEST", "ORDER BY", "PREPARE", "SELECT", "SET CURRENT SCHEMA", "SET SCHEMA", "SET", "UNNEST", "UPDATE", "UPSERT", "USE KEYS", "VALUES", "WHERE"];
    var reservedTopLevelWordsNoIndent = ["INTERSECT", "INTERSECT ALL", "MINUS", "UNION", "UNION ALL"];
    var reservedNewlineWords = [
      "AND",
      "OR",
      "XOR",
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN"
    ];
    var N1qlFormatter = function(_Formatter) {
      _inherits(N1qlFormatter2, _Formatter);
      var _super = _createSuper(N1qlFormatter2);
      function N1qlFormatter2() {
        _classCallCheck(this, N1qlFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(N1qlFormatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ['""', "''", "``"],
            openParens: ["(", "[", "{"],
            closeParens: [")", "]", "}"],
            namedPlaceholderTypes: ["$"],
            lineCommentTypes: ["#", "--"],
            operators: ["==", "!="]
          });
        }
      }]);
      return N1qlFormatter2;
    }(_Formatter2["default"]);
    exports["default"] = N1qlFormatter;
    module.exports = exports.default;
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/PlSqlFormatter.js
var require_PlSqlFormatter = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/PlSqlFormatter.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _token = require_token();
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    var _tokenTypes = _interopRequireDefault(require_tokenTypes());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["A", "ACCESSIBLE", "AGENT", "AGGREGATE", "ALL", "ALTER", "ANY", "ARRAY", "AS", "ASC", "AT", "ATTRIBUTE", "AUTHID", "AVG", "BETWEEN", "BFILE_BASE", "BINARY_INTEGER", "BINARY", "BLOB_BASE", "BLOCK", "BODY", "BOOLEAN", "BOTH", "BOUND", "BREADTH", "BULK", "BY", "BYTE", "C", "CALL", "CALLING", "CASCADE", "CASE", "CHAR_BASE", "CHAR", "CHARACTER", "CHARSET", "CHARSETFORM", "CHARSETID", "CHECK", "CLOB_BASE", "CLONE", "CLOSE", "CLUSTER", "CLUSTERS", "COALESCE", "COLAUTH", "COLLECT", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "COMPILED", "COMPRESS", "CONNECT", "CONSTANT", "CONSTRUCTOR", "CONTEXT", "CONTINUE", "CONVERT", "COUNT", "CRASH", "CREATE", "CREDENTIAL", "CURRENT", "CURRVAL", "CURSOR", "CUSTOMDATUM", "DANGLING", "DATA", "DATE_BASE", "DATE", "DAY", "DECIMAL", "DEFAULT", "DEFINE", "DELETE", "DEPTH", "DESC", "DETERMINISTIC", "DIRECTORY", "DISTINCT", "DO", "DOUBLE", "DROP", "DURATION", "ELEMENT", "ELSIF", "EMPTY", "END", "ESCAPE", "EXCEPTIONS", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXIT", "EXTENDS", "EXTERNAL", "EXTRACT", "FALSE", "FETCH", "FINAL", "FIRST", "FIXED", "FLOAT", "FOR", "FORALL", "FORCE", "FROM", "FUNCTION", "GENERAL", "GOTO", "GRANT", "GROUP", "HASH", "HEAP", "HIDDEN", "HOUR", "IDENTIFIED", "IF", "IMMEDIATE", "IN", "INCLUDING", "INDEX", "INDEXES", "INDICATOR", "INDICES", "INFINITE", "INSTANTIABLE", "INT", "INTEGER", "INTERFACE", "INTERVAL", "INTO", "INVALIDATE", "IS", "ISOLATION", "JAVA", "LANGUAGE", "LARGE", "LEADING", "LENGTH", "LEVEL", "LIBRARY", "LIKE", "LIKE2", "LIKE4", "LIKEC", "LIMITED", "LOCAL", "LOCK", "LONG", "MAP", "MAX", "MAXLEN", "MEMBER", "MERGE", "MIN", "MINUTE", "MLSLABEL", "MOD", "MODE", "MONTH", "MULTISET", "NAME", "NAN", "NATIONAL", "NATIVE", "NATURAL", "NATURALN", "NCHAR", "NEW", "NEXTVAL", "NOCOMPRESS", "NOCOPY", "NOT", "NOWAIT", "NULL", "NULLIF", "NUMBER_BASE", "NUMBER", "OBJECT", "OCICOLL", "OCIDATE", "OCIDATETIME", "OCIDURATION", "OCIINTERVAL", "OCILOBLOCATOR", "OCINUMBER", "OCIRAW", "OCIREF", "OCIREFCURSOR", "OCIROWID", "OCISTRING", "OCITYPE", "OF", "OLD", "ON", "ONLY", "OPAQUE", "OPEN", "OPERATOR", "OPTION", "ORACLE", "ORADATA", "ORDER", "ORGANIZATION", "ORLANY", "ORLVARY", "OTHERS", "OUT", "OVERLAPS", "OVERRIDING", "PACKAGE", "PARALLEL_ENABLE", "PARAMETER", "PARAMETERS", "PARENT", "PARTITION", "PASCAL", "PCTFREE", "PIPE", "PIPELINED", "PLS_INTEGER", "PLUGGABLE", "POSITIVE", "POSITIVEN", "PRAGMA", "PRECISION", "PRIOR", "PRIVATE", "PROCEDURE", "PUBLIC", "RAISE", "RANGE", "RAW", "READ", "REAL", "RECORD", "REF", "REFERENCE", "RELEASE", "RELIES_ON", "REM", "REMAINDER", "RENAME", "RESOURCE", "RESULT_CACHE", "RESULT", "RETURN", "RETURNING", "REVERSE", "REVOKE", "ROLLBACK", "ROW", "ROWID", "ROWNUM", "ROWTYPE", "SAMPLE", "SAVE", "SAVEPOINT", "SB1", "SB2", "SB4", "SEARCH", "SECOND", "SEGMENT", "SELF", "SEPARATE", "SEQUENCE", "SERIALIZABLE", "SHARE", "SHORT", "SIZE_T", "SIZE", "SMALLINT", "SOME", "SPACE", "SPARSE", "SQL", "SQLCODE", "SQLDATA", "SQLERRM", "SQLNAME", "SQLSTATE", "STANDARD", "START", "STATIC", "STDDEV", "STORED", "STRING", "STRUCT", "STYLE", "SUBMULTISET", "SUBPARTITION", "SUBSTITUTABLE", "SUBTYPE", "SUCCESSFUL", "SUM", "SYNONYM", "SYSDATE", "TABAUTH", "TABLE", "TDO", "THE", "THEN", "TIME", "TIMESTAMP", "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TIMEZONE_REGION", "TO", "TRAILING", "TRANSACTION", "TRANSACTIONAL", "TRIGGER", "TRUE", "TRUSTED", "TYPE", "UB1", "UB2", "UB4", "UID", "UNDER", "UNIQUE", "UNPLUG", "UNSIGNED", "UNTRUSTED", "USE", "USER", "USING", "VALIDATE", "VALIST", "VALUE", "VARCHAR", "VARCHAR2", "VARIABLE", "VARIANCE", "VARRAY", "VARYING", "VIEW", "VIEWS", "VOID", "WHENEVER", "WHILE", "WITH", "WORK", "WRAPPED", "WRITE", "YEAR", "ZONE"];
    var reservedTopLevelWords = ["ADD", "ALTER COLUMN", "ALTER TABLE", "BEGIN", "CONNECT BY", "DECLARE", "DELETE FROM", "DELETE", "END", "EXCEPT", "EXCEPTION", "FETCH FIRST", "FROM", "GROUP BY", "HAVING", "INSERT INTO", "INSERT", "LIMIT", "LOOP", "MODIFY", "ORDER BY", "SELECT", "SET CURRENT SCHEMA", "SET SCHEMA", "SET", "START WITH", "UPDATE", "VALUES", "WHERE"];
    var reservedTopLevelWordsNoIndent = ["INTERSECT", "INTERSECT ALL", "MINUS", "UNION", "UNION ALL"];
    var reservedNewlineWords = [
      "AND",
      "CROSS APPLY",
      "ELSE",
      "END",
      "OR",
      "OUTER APPLY",
      "WHEN",
      "XOR",
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN",
      "FULL JOIN",
      "FULL OUTER JOIN",
      "CROSS JOIN",
      "NATURAL JOIN"
    ];
    var PlSqlFormatter = function(_Formatter) {
      _inherits(PlSqlFormatter2, _Formatter);
      var _super = _createSuper(PlSqlFormatter2);
      function PlSqlFormatter2() {
        _classCallCheck(this, PlSqlFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(PlSqlFormatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ['""', "N''", "''", "``"],
            openParens: ["(", "CASE"],
            closeParens: [")", "END"],
            indexedPlaceholderTypes: ["?"],
            namedPlaceholderTypes: [":"],
            lineCommentTypes: ["--"],
            specialWordChars: ["_", "$", "#", ".", "@"],
            operators: ["||", "**", "!=", ":="]
          });
        }
      }, {
        key: "tokenOverride",
        value: function tokenOverride(token) {
          if ((0, _token.isSet)(token) && (0, _token.isBy)(this.previousReservedToken)) {
            return {
              type: _tokenTypes["default"].RESERVED,
              value: token.value
            };
          }
          return token;
        }
      }]);
      return PlSqlFormatter2;
    }(_Formatter2["default"]);
    exports["default"] = PlSqlFormatter;
    module.exports = exports.default;
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/PostgreSqlFormatter.js
var require_PostgreSqlFormatter = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/PostgreSqlFormatter.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["ABORT", "ABSOLUTE", "ACCESS", "ACTION", "ADD", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN", "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN", "BOTH", "BY", "CACHE", "CALL", "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG", "CHAIN", "CHAR", "CHARACTER", "CHARACTERISTICS", "CHECK", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT", "CONTINUE", "CONVERSION", "COPY", "COST", "CREATE", "CROSS", "CSV", "CUBE", "CURRENT", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CYCLE", "DATA", "DATABASE", "DAY", "DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE", "DELIMITER", "DELIMITERS", "DEPENDS", "DESC", "DETACH", "DICTIONARY", "DISABLE", "DISCARD", "DISTINCT", "DO", "DOCUMENT", "DOMAIN", "DOUBLE", "DROP", "EACH", "ELSE", "ENABLE", "ENCODING", "ENCRYPTED", "END", "ENUM", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPRESSION", "EXTENSION", "EXTERNAL", "EXTRACT", "FALSE", "FAMILY", "FETCH", "FILTER", "FIRST", "FLOAT", "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOBAL", "GRANT", "GRANTED", "GREATEST", "GROUP", "GROUPING", "GROUPS", "HANDLER", "HAVING", "HEADER", "HOLD", "HOUR", "IDENTITY", "IF", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT", "IMPORT", "IN", "INCLUDE", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE", "INNER", "INOUT", "INPUT", "INSENSITIVE", "INSERT", "INSTEAD", "INT", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN", "KEY", "LABEL", "LANGUAGE", "LARGE", "LAST", "LATERAL", "LEADING", "LEAKPROOF", "LEAST", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION", "LOCK", "LOCKED", "LOGGED", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD", "MINUTE", "MINVALUE", "MODE", "MONTH", "MOVE", "NAME", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT", "NFC", "NFD", "NFKC", "NFKD", "NO", "NONE", "NORMALIZE", "NORMALIZED", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL", "NULLIF", "NULLS", "NUMERIC", "OBJECT", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY", "OTHERS", "OUT", "OUTER", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PLACING", "PLANS", "POLICY", "POSITION", "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROCEDURES", "PROGRAM", "PUBLICATION", "QUOTE", "RANGE", "READ", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIVE", "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROUTINE", "ROUTINES", "ROW", "ROWS", "RULE", "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND", "SECURITY", "SELECT", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SQL", "STABLE", "STANDALONE", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STORED", "STRICT", "STRIP", "SUBSCRIPTION", "SUBSTRING", "SUPPORT", "SYMMETRIC", "SYSID", "SYSTEM", "TABLE", "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT", "THEN", "TIES", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE", "TRUNCATE", "TRUSTED", "TYPE", "TYPES", "UESCAPE", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "USER", "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE", "VALUES", "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION", "VIEW", "VIEWS", "VOLATILE", "WHEN", "WHERE", "WHITESPACE", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE", "XML", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR", "YES", "ZONE"];
    var reservedTopLevelWords = ["ADD", "AFTER", "ALTER COLUMN", "ALTER TABLE", "CASE", "DELETE FROM", "END", "EXCEPT", "FETCH FIRST", "FROM", "GROUP BY", "HAVING", "INSERT INTO", "INSERT", "LIMIT", "ORDER BY", "SELECT", "SET CURRENT SCHEMA", "SET SCHEMA", "SET", "UPDATE", "VALUES", "WHERE"];
    var reservedTopLevelWordsNoIndent = ["INTERSECT", "INTERSECT ALL", "UNION", "UNION ALL"];
    var reservedNewlineWords = [
      "AND",
      "ELSE",
      "OR",
      "WHEN",
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN",
      "FULL JOIN",
      "FULL OUTER JOIN",
      "CROSS JOIN",
      "NATURAL JOIN"
    ];
    var PostgreSqlFormatter = function(_Formatter) {
      _inherits(PostgreSqlFormatter2, _Formatter);
      var _super = _createSuper(PostgreSqlFormatter2);
      function PostgreSqlFormatter2() {
        _classCallCheck(this, PostgreSqlFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(PostgreSqlFormatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ['""', "''", "U&''", 'U&""', "$$"],
            openParens: ["(", "CASE"],
            closeParens: [")", "END"],
            indexedPlaceholderTypes: ["$"],
            namedPlaceholderTypes: [":"],
            lineCommentTypes: ["--"],
            operators: ["!=", "<<", ">>", "||/", "|/", "::", "->>", "->", "~~*", "~~", "!~~*", "!~~", "~*", "!~*", "!~", "!!"]
          });
        }
      }]);
      return PostgreSqlFormatter2;
    }(_Formatter2["default"]);
    exports["default"] = PostgreSqlFormatter;
    module.exports = exports.default;
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/RedshiftFormatter.js
var require_RedshiftFormatter = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/RedshiftFormatter.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["AES128", "AES256", "ALLOWOVERWRITE", "ANALYSE", "ARRAY", "AS", "ASC", "AUTHORIZATION", "BACKUP", "BINARY", "BLANKSASNULL", "BOTH", "BYTEDICT", "BZIP2", "CAST", "CHECK", "COLLATE", "COLUMN", "CONSTRAINT", "CREATE", "CREDENTIALS", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURRENT_USER_ID", "DEFAULT", "DEFERRABLE", "DEFLATE", "DEFRAG", "DELTA", "DELTA32K", "DESC", "DISABLE", "DISTINCT", "DO", "ELSE", "EMPTYASNULL", "ENABLE", "ENCODE", "ENCRYPT", "ENCRYPTION", "END", "EXPLICIT", "FALSE", "FOR", "FOREIGN", "FREEZE", "FULL", "GLOBALDICT256", "GLOBALDICT64K", "GRANT", "GZIP", "IDENTITY", "IGNORE", "ILIKE", "INITIALLY", "INTO", "LEADING", "LOCALTIME", "LOCALTIMESTAMP", "LUN", "LUNS", "LZO", "LZOP", "MINUS", "MOSTLY13", "MOSTLY32", "MOSTLY8", "NATURAL", "NEW", "NULLS", "OFF", "OFFLINE", "OFFSET", "OLD", "ON", "ONLY", "OPEN", "ORDER", "OVERLAPS", "PARALLEL", "PARTITION", "PERCENT", "PERMISSIONS", "PLACING", "PRIMARY", "RAW", "READRATIO", "RECOVER", "REFERENCES", "REJECTLOG", "RESORT", "RESTORE", "SESSION_USER", "SIMILAR", "SYSDATE", "SYSTEM", "TABLE", "TAG", "TDES", "TEXT255", "TEXT32K", "THEN", "TIMESTAMP", "TO", "TOP", "TRAILING", "TRUE", "TRUNCATECOLUMNS", "UNIQUE", "USER", "USING", "VERBOSE", "WALLET", "WHEN", "WITH", "WITHOUT", "PREDICATE", "COLUMNS", "COMPROWS", "COMPRESSION", "COPY", "FORMAT", "DELIMITER", "FIXEDWIDTH", "AVRO", "JSON", "ENCRYPTED", "BZIP2", "GZIP", "LZOP", "PARQUET", "ORC", "ACCEPTANYDATE", "ACCEPTINVCHARS", "BLANKSASNULL", "DATEFORMAT", "EMPTYASNULL", "ENCODING", "ESCAPE", "EXPLICIT_IDS", "FILLRECORD", "IGNOREBLANKLINES", "IGNOREHEADER", "NULL AS", "REMOVEQUOTES", "ROUNDEC", "TIMEFORMAT", "TRIMBLANKS", "TRUNCATECOLUMNS", "COMPROWS", "COMPUPDATE", "MAXERROR", "NOLOAD", "STATUPDATE", "MANIFEST", "REGION", "IAM_ROLE", "MASTER_SYMMETRIC_KEY", "SSH", "ACCEPTANYDATE", "ACCEPTINVCHARS", "ACCESS_KEY_ID", "SECRET_ACCESS_KEY", "AVRO", "BLANKSASNULL", "BZIP2", "COMPROWS", "COMPUPDATE", "CREDENTIALS", "DATEFORMAT", "DELIMITER", "EMPTYASNULL", "ENCODING", "ENCRYPTED", "ESCAPE", "EXPLICIT_IDS", "FILLRECORD", "FIXEDWIDTH", "FORMAT", "IAM_ROLE", "GZIP", "IGNOREBLANKLINES", "IGNOREHEADER", "JSON", "LZOP", "MANIFEST", "MASTER_SYMMETRIC_KEY", "MAXERROR", "NOLOAD", "NULL AS", "READRATIO", "REGION", "REMOVEQUOTES", "ROUNDEC", "SSH", "STATUPDATE", "TIMEFORMAT", "SESSION_TOKEN", "TRIMBLANKS", "TRUNCATECOLUMNS", "EXTERNAL", "DATA CATALOG", "HIVE METASTORE", "CATALOG_ROLE", "VACUUM", "COPY", "UNLOAD", "EVEN", "ALL"];
    var reservedTopLevelWords = ["ADD", "AFTER", "ALTER COLUMN", "ALTER TABLE", "DELETE FROM", "EXCEPT", "FROM", "GROUP BY", "HAVING", "INSERT INTO", "INSERT", "INTERSECT", "TOP", "LIMIT", "MODIFY", "ORDER BY", "SELECT", "SET CURRENT SCHEMA", "SET SCHEMA", "SET", "UNION ALL", "UNION", "UPDATE", "VALUES", "WHERE", "VACUUM", "COPY", "UNLOAD", "ANALYZE", "ANALYSE", "DISTKEY", "SORTKEY", "COMPOUND", "INTERLEAVED", "FORMAT", "DELIMITER", "FIXEDWIDTH", "AVRO", "JSON", "ENCRYPTED", "BZIP2", "GZIP", "LZOP", "PARQUET", "ORC", "ACCEPTANYDATE", "ACCEPTINVCHARS", "BLANKSASNULL", "DATEFORMAT", "EMPTYASNULL", "ENCODING", "ESCAPE", "EXPLICIT_IDS", "FILLRECORD", "IGNOREBLANKLINES", "IGNOREHEADER", "NULL AS", "REMOVEQUOTES", "ROUNDEC", "TIMEFORMAT", "TRIMBLANKS", "TRUNCATECOLUMNS", "COMPROWS", "COMPUPDATE", "MAXERROR", "NOLOAD", "STATUPDATE", "MANIFEST", "REGION", "IAM_ROLE", "MASTER_SYMMETRIC_KEY", "SSH", "ACCEPTANYDATE", "ACCEPTINVCHARS", "ACCESS_KEY_ID", "SECRET_ACCESS_KEY", "AVRO", "BLANKSASNULL", "BZIP2", "COMPROWS", "COMPUPDATE", "CREDENTIALS", "DATEFORMAT", "DELIMITER", "EMPTYASNULL", "ENCODING", "ENCRYPTED", "ESCAPE", "EXPLICIT_IDS", "FILLRECORD", "FIXEDWIDTH", "FORMAT", "IAM_ROLE", "GZIP", "IGNOREBLANKLINES", "IGNOREHEADER", "JSON", "LZOP", "MANIFEST", "MASTER_SYMMETRIC_KEY", "MAXERROR", "NOLOAD", "NULL AS", "READRATIO", "REGION", "REMOVEQUOTES", "ROUNDEC", "SSH", "STATUPDATE", "TIMEFORMAT", "SESSION_TOKEN", "TRIMBLANKS", "TRUNCATECOLUMNS", "EXTERNAL", "DATA CATALOG", "HIVE METASTORE", "CATALOG_ROLE"];
    var reservedTopLevelWordsNoIndent = [];
    var reservedNewlineWords = [
      "AND",
      "ELSE",
      "OR",
      "OUTER APPLY",
      "WHEN",
      "VACUUM",
      "COPY",
      "UNLOAD",
      "ANALYZE",
      "ANALYSE",
      "DISTKEY",
      "SORTKEY",
      "COMPOUND",
      "INTERLEAVED",
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN",
      "FULL JOIN",
      "FULL OUTER JOIN",
      "CROSS JOIN",
      "NATURAL JOIN"
    ];
    var RedshiftFormatter = function(_Formatter) {
      _inherits(RedshiftFormatter2, _Formatter);
      var _super = _createSuper(RedshiftFormatter2);
      function RedshiftFormatter2() {
        _classCallCheck(this, RedshiftFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(RedshiftFormatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ['""', "''", "``"],
            openParens: ["("],
            closeParens: [")"],
            indexedPlaceholderTypes: ["?"],
            namedPlaceholderTypes: ["@", "#", "$"],
            lineCommentTypes: ["--"],
            operators: ["|/", "||/", "<<", ">>", "!=", "||"]
          });
        }
      }]);
      return RedshiftFormatter2;
    }(_Formatter2["default"]);
    exports["default"] = RedshiftFormatter;
    module.exports = exports.default;
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/SparkSqlFormatter.js
var require_SparkSqlFormatter = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/SparkSqlFormatter.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _token = require_token();
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    var _tokenTypes = _interopRequireDefault(require_tokenTypes());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["ALL", "ALTER", "ANALYSE", "ANALYZE", "ARRAY_ZIP", "ARRAY", "AS", "ASC", "AVG", "BETWEEN", "CASCADE", "CASE", "CAST", "COALESCE", "COLLECT_LIST", "COLLECT_SET", "COLUMN", "COLUMNS", "COMMENT", "CONSTRAINT", "CONTAINS", "CONVERT", "COUNT", "CUME_DIST", "CURRENT ROW", "CURRENT_DATE", "CURRENT_TIMESTAMP", "DATABASE", "DATABASES", "DATE_ADD", "DATE_SUB", "DATE_TRUNC", "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "DAY", "DAYS", "DECODE", "DEFAULT", "DELETE", "DENSE_RANK", "DESC", "DESCRIBE", "DISTINCT", "DISTINCTROW", "DIV", "DROP", "ELSE", "ENCODE", "END", "EXISTS", "EXPLAIN", "EXPLODE_OUTER", "EXPLODE", "FILTER", "FIRST_VALUE", "FIRST", "FIXED", "FLATTEN", "FOLLOWING", "FROM_UNIXTIME", "FULL", "GREATEST", "GROUP_CONCAT", "HOUR_MINUTE", "HOUR_SECOND", "HOUR", "HOURS", "IF", "IFNULL", "IN", "INSERT", "INTERVAL", "INTO", "IS", "LAG", "LAST_VALUE", "LAST", "LEAD", "LEADING", "LEAST", "LEVEL", "LIKE", "MAX", "MERGE", "MIN", "MINUTE_SECOND", "MINUTE", "MONTH", "NATURAL", "NOT", "NOW()", "NTILE", "NULL", "NULLIF", "OFFSET", "ON DELETE", "ON UPDATE", "ON", "ONLY", "OPTIMIZE", "OVER", "PERCENT_RANK", "PRECEDING", "RANGE", "RANK", "REGEXP", "RENAME", "RLIKE", "ROW", "ROWS", "SECOND", "SEPARATOR", "SEQUENCE", "SIZE", "STRING", "STRUCT", "SUM", "TABLE", "TABLES", "TEMPORARY", "THEN", "TO_DATE", "TO_JSON", "TO", "TRAILING", "TRANSFORM", "TRUE", "TRUNCATE", "TYPE", "TYPES", "UNBOUNDED", "UNIQUE", "UNIX_TIMESTAMP", "UNLOCK", "UNSIGNED", "USING", "VARIABLES", "VIEW", "WHEN", "WITH", "YEAR_MONTH"];
    var reservedTopLevelWords = ["ADD", "AFTER", "ALTER COLUMN", "ALTER DATABASE", "ALTER SCHEMA", "ALTER TABLE", "CLUSTER BY", "CLUSTERED BY", "DELETE FROM", "DISTRIBUTE BY", "FROM", "GROUP BY", "HAVING", "INSERT INTO", "INSERT", "LIMIT", "OPTIONS", "ORDER BY", "PARTITION BY", "PARTITIONED BY", "RANGE", "ROWS", "SELECT", "SET CURRENT SCHEMA", "SET SCHEMA", "SET", "TBLPROPERTIES", "UPDATE", "USING", "VALUES", "WHERE", "WINDOW"];
    var reservedTopLevelWordsNoIndent = ["EXCEPT ALL", "EXCEPT", "INTERSECT ALL", "INTERSECT", "UNION ALL", "UNION"];
    var reservedNewlineWords = [
      "AND",
      "CREATE OR",
      "CREATE",
      "ELSE",
      "LATERAL VIEW",
      "OR",
      "OUTER APPLY",
      "WHEN",
      "XOR",
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN",
      "FULL JOIN",
      "FULL OUTER JOIN",
      "CROSS JOIN",
      "NATURAL JOIN",
      "ANTI JOIN",
      "SEMI JOIN",
      "LEFT ANTI JOIN",
      "LEFT SEMI JOIN",
      "RIGHT OUTER JOIN",
      "RIGHT SEMI JOIN",
      "NATURAL ANTI JOIN",
      "NATURAL FULL OUTER JOIN",
      "NATURAL INNER JOIN",
      "NATURAL LEFT ANTI JOIN",
      "NATURAL LEFT OUTER JOIN",
      "NATURAL LEFT SEMI JOIN",
      "NATURAL OUTER JOIN",
      "NATURAL RIGHT OUTER JOIN",
      "NATURAL RIGHT SEMI JOIN",
      "NATURAL SEMI JOIN"
    ];
    var SparkSqlFormatter = function(_Formatter) {
      _inherits(SparkSqlFormatter2, _Formatter);
      var _super = _createSuper(SparkSqlFormatter2);
      function SparkSqlFormatter2() {
        _classCallCheck(this, SparkSqlFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(SparkSqlFormatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ['""', "''", "``", "{}"],
            openParens: ["(", "CASE"],
            closeParens: [")", "END"],
            indexedPlaceholderTypes: ["?"],
            namedPlaceholderTypes: ["$"],
            lineCommentTypes: ["--"],
            operators: ["!=", "<=>", "&&", "||", "=="]
          });
        }
      }, {
        key: "tokenOverride",
        value: function tokenOverride(token) {
          if ((0, _token.isWindow)(token)) {
            var aheadToken = this.tokenLookAhead();
            if (aheadToken && aheadToken.type === _tokenTypes["default"].OPEN_PAREN) {
              return {
                type: _tokenTypes["default"].RESERVED,
                value: token.value
              };
            }
          }
          if ((0, _token.isEnd)(token)) {
            var backToken = this.tokenLookBehind();
            if (backToken && backToken.type === _tokenTypes["default"].OPERATOR && backToken.value === ".") {
              return {
                type: _tokenTypes["default"].WORD,
                value: token.value
              };
            }
          }
          return token;
        }
      }]);
      return SparkSqlFormatter2;
    }(_Formatter2["default"]);
    exports["default"] = SparkSqlFormatter;
    module.exports = exports.default;
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/StandardSqlFormatter.js
var require_StandardSqlFormatter = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/StandardSqlFormatter.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["ABS", "ALL", "ALLOCATE", "ALTER", "AND", "ANY", "ARE", "ARRAY", "AS", "ASENSITIVE", "ASYMMETRIC", "AT", "ATOMIC", "AUTHORIZATION", "AVG", "BEGIN", "BETWEEN", "BIGINT", "BINARY", "BLOB", "BOOLEAN", "BOTH", "BY", "CALL", "CALLED", "CARDINALITY", "CASCADED", "CASE", "CAST", "CEIL", "CEILING", "CHAR", "CHAR_LENGTH", "CHARACTER", "CHARACTER_LENGTH", "CHECK", "CLOB", "CLOSE", "COALESCE", "COLLATE", "COLLECT", "COLUMN", "COMMIT", "CONDITION", "CONNECT", "CONSTRAINT", "CONVERT", "CORR", "CORRESPONDING", "COUNT", "COVAR_POP", "COVAR_SAMP", "CREATE", "CROSS", "CUBE", "CUME_DIST", "CURRENT", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_DEFAULT_TRANSFORM_GROUP", "CURRENT_PATH", "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_TRANSFORM_GROUP_FOR_TYPE", "CURRENT_USER", "CURSOR", "CYCLE", "DATE", "DAY", "DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DELETE", "DENSE_RANK", "DEREF", "DESCRIBE", "DETERMINISTIC", "DISCONNECT", "DISTINCT", "DOUBLE", "DROP", "DYNAMIC", "EACH", "ELEMENT", "ELSE", "END", "END-EXEC", "ESCAPE", "EVERY", "EXCEPT", "EXEC", "EXECUTE", "EXISTS", "EXP", "EXTERNAL", "EXTRACT", "FALSE", "FETCH", "FILTER", "FLOAT", "FLOOR", "FOR", "FOREIGN", "FREE", "FROM", "FULL", "FUNCTION", "FUSION", "GET", "GLOBAL", "GRANT", "GROUP", "GROUPING", "HAVING", "HOLD", "HOUR", "IDENTITY", "IN", "INDICATOR", "INNER", "INOUT", "INSENSITIVE", "INSERT", "INT", "INTEGER", "INTERSECT", "INTERSECTION", "INTERVAL", "INTO", "IS", "JOIN", "LANGUAGE", "LARGE", "LATERAL", "LEADING", "LEFT", "LIKE", "LIKE_REGEX", "LN", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOWER", "MATCH", "MAX", "MEMBER", "MERGE", "METHOD", "MIN", "MINUTE", "MOD", "MODIFIES", "MODULE", "MONTH", "MULTISET", "NATIONAL", "NATURAL", "NCHAR", "NCLOB", "NEW", "NO", "NONE", "NORMALIZE", "NOT", "NULL", "NULLIF", "NUMERIC", "OCTET_LENGTH", "OCCURRENCES_REGEX", "OF", "OLD", "ON", "ONLY", "OPEN", "OR", "ORDER", "OUT", "OUTER", "OVER", "OVERLAPS", "OVERLAY", "PARAMETER", "PARTITION", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "POSITION", "POSITION_REGEX", "POWER", "PRECISION", "PREPARE", "PRIMARY", "PROCEDURE", "RANGE", "RANK", "READS", "REAL", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", "REGR_SXY", "REGR_SYY", "RELEASE", "RESULT", "RETURN", "RETURNS", "REVOKE", "RIGHT", "ROLLBACK", "ROLLUP", "ROW", "ROW_NUMBER", "ROWS", "SAVEPOINT", "SCOPE", "SCROLL", "SEARCH", "SECOND", "SELECT", "SENSITIVE", "SESSION_USER", "SET", "SIMILAR", "SMALLINT", "SOME", "SPECIFIC", "SPECIFICTYPE", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQRT", "START", "STATIC", "STDDEV_POP", "STDDEV_SAMP", "SUBMULTISET", "SUBSTRING", "SUBSTRING_REGEX", "SUM", "SYMMETRIC", "SYSTEM", "SYSTEM_USER", "TABLE", "TABLESAMPLE", "THEN", "TIME", "TIMESTAMP", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TO", "TRAILING", "TRANSLATE", "TRANSLATE_REGEX", "TRANSLATION", "TREAT", "TRIGGER", "TRIM", "TRUE", "UESCAPE", "UNION", "UNIQUE", "UNKNOWN", "UNNEST", "UPDATE", "UPPER", "USER", "USING", "VALUE", "VALUES", "VAR_POP", "VAR_SAMP", "VARBINARY", "VARCHAR", "VARYING", "WHEN", "WHENEVER", "WHERE", "WIDTH_BUCKET", "WINDOW", "WITH", "WITHIN", "WITHOUT", "YEAR"];
    var reservedTopLevelWords = ["ADD", "ALTER COLUMN", "ALTER TABLE", "CASE", "DELETE FROM", "END", "FETCH FIRST", "FETCH NEXT", "FETCH PRIOR", "FETCH LAST", "FETCH ABSOLUTE", "FETCH RELATIVE", "FROM", "GROUP BY", "HAVING", "INSERT INTO", "LIMIT", "ORDER BY", "SELECT", "SET SCHEMA", "SET", "UPDATE", "VALUES", "WHERE"];
    var reservedTopLevelWordsNoIndent = ["INTERSECT", "INTERSECT ALL", "INTERSECT DISTINCT", "UNION", "UNION ALL", "UNION DISTINCT", "EXCEPT", "EXCEPT ALL", "EXCEPT DISTINCT"];
    var reservedNewlineWords = [
      "AND",
      "ELSE",
      "OR",
      "WHEN",
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN",
      "FULL JOIN",
      "FULL OUTER JOIN",
      "CROSS JOIN",
      "NATURAL JOIN"
    ];
    var StandardSqlFormatter = function(_Formatter) {
      _inherits(StandardSqlFormatter2, _Formatter);
      var _super = _createSuper(StandardSqlFormatter2);
      function StandardSqlFormatter2() {
        _classCallCheck(this, StandardSqlFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(StandardSqlFormatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ['""', "''"],
            openParens: ["(", "CASE"],
            closeParens: [")", "END"],
            indexedPlaceholderTypes: ["?"],
            namedPlaceholderTypes: [],
            lineCommentTypes: ["--"]
          });
        }
      }]);
      return StandardSqlFormatter2;
    }(_Formatter2["default"]);
    exports["default"] = StandardSqlFormatter;
    module.exports = exports.default;
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/TSqlFormatter.js
var require_TSqlFormatter = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/languages/TSqlFormatter.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["ADD", "EXTERNAL", "PROCEDURE", "ALL", "FETCH", "PUBLIC", "ALTER", "FILE", "RAISERROR", "AND", "FILLFACTOR", "READ", "ANY", "FOR", "READTEXT", "AS", "FOREIGN", "RECONFIGURE", "ASC", "FREETEXT", "REFERENCES", "AUTHORIZATION", "FREETEXTTABLE", "REPLICATION", "BACKUP", "FROM", "RESTORE", "BEGIN", "FULL", "RESTRICT", "BETWEEN", "FUNCTION", "RETURN", "BREAK", "GOTO", "REVERT", "BROWSE", "GRANT", "REVOKE", "BULK", "GROUP", "RIGHT", "BY", "HAVING", "ROLLBACK", "CASCADE", "HOLDLOCK", "ROWCOUNT", "CASE", "IDENTITY", "ROWGUIDCOL", "CHECK", "IDENTITY_INSERT", "RULE", "CHECKPOINT", "IDENTITYCOL", "SAVE", "CLOSE", "IF", "SCHEMA", "CLUSTERED", "IN", "SECURITYAUDIT", "COALESCE", "INDEX", "SELECT", "COLLATE", "INNER", "SEMANTICKEYPHRASETABLE", "COLUMN", "INSERT", "SEMANTICSIMILARITYDETAILSTABLE", "COMMIT", "INTERSECT", "SEMANTICSIMILARITYTABLE", "COMPUTE", "INTO", "SESSION_USER", "CONSTRAINT", "IS", "SET", "CONTAINS", "JOIN", "SETUSER", "CONTAINSTABLE", "KEY", "SHUTDOWN", "CONTINUE", "KILL", "SOME", "CONVERT", "LEFT", "STATISTICS", "CREATE", "LIKE", "SYSTEM_USER", "CROSS", "LINENO", "TABLE", "CURRENT", "LOAD", "TABLESAMPLE", "CURRENT_DATE", "MERGE", "TEXTSIZE", "CURRENT_TIME", "NATIONAL", "THEN", "CURRENT_TIMESTAMP", "NOCHECK", "TO", "CURRENT_USER", "NONCLUSTERED", "TOP", "CURSOR", "NOT", "TRAN", "DATABASE", "NULL", "TRANSACTION", "DBCC", "NULLIF", "TRIGGER", "DEALLOCATE", "OF", "TRUNCATE", "DECLARE", "OFF", "TRY_CONVERT", "DEFAULT", "OFFSETS", "TSEQUAL", "DELETE", "ON", "UNION", "DENY", "OPEN", "UNIQUE", "DESC", "OPENDATASOURCE", "UNPIVOT", "DISK", "OPENQUERY", "UPDATE", "DISTINCT", "OPENROWSET", "UPDATETEXT", "DISTRIBUTED", "OPENXML", "USE", "DOUBLE", "OPTION", "USER", "DROP", "OR", "VALUES", "DUMP", "ORDER", "VARYING", "ELSE", "OUTER", "VIEW", "END", "OVER", "WAITFOR", "ERRLVL", "PERCENT", "WHEN", "ESCAPE", "PIVOT", "WHERE", "EXCEPT", "PLAN", "WHILE", "EXEC", "PRECISION", "WITH", "EXECUTE", "PRIMARY", "WITHIN GROUP", "EXISTS", "PRINT", "WRITETEXT", "EXIT", "PROC"];
    var reservedTopLevelWords = ["ADD", "ALTER COLUMN", "ALTER TABLE", "CASE", "DELETE FROM", "END", "EXCEPT", "FROM", "GROUP BY", "HAVING", "INSERT INTO", "INSERT", "LIMIT", "ORDER BY", "SELECT", "SET CURRENT SCHEMA", "SET SCHEMA", "SET", "UPDATE", "VALUES", "WHERE"];
    var reservedTopLevelWordsNoIndent = ["INTERSECT", "INTERSECT ALL", "MINUS", "UNION", "UNION ALL"];
    var reservedNewlineWords = [
      "AND",
      "ELSE",
      "OR",
      "WHEN",
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN",
      "FULL JOIN",
      "FULL OUTER JOIN",
      "CROSS JOIN"
    ];
    var TSqlFormatter = function(_Formatter) {
      _inherits(TSqlFormatter2, _Formatter);
      var _super = _createSuper(TSqlFormatter2);
      function TSqlFormatter2() {
        _classCallCheck(this, TSqlFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(TSqlFormatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ['""', "N''", "''", "[]"],
            openParens: ["(", "CASE"],
            closeParens: [")", "END"],
            indexedPlaceholderTypes: [],
            namedPlaceholderTypes: ["@"],
            lineCommentTypes: ["--"],
            specialWordChars: ["#", "@"],
            operators: [">=", "<=", "<>", "!=", "!<", "!>", "+=", "-=", "*=", "/=", "%=", "|=", "&=", "^=", "::"]
          });
        }
      }]);
      return TSqlFormatter2;
    }(_Formatter2["default"]);
    exports["default"] = TSqlFormatter;
    module.exports = exports.default;
  }
});

// ../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/sqlFormatter.js
var require_sqlFormatter = __commonJS({
  "../../node_modules/.pnpm/sql-formatter@4.0.2/node_modules/sql-formatter/lib/sqlFormatter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.supportedDialects = exports.format = void 0;
    var _Db2Formatter = _interopRequireDefault(require_Db2Formatter());
    var _MariaDbFormatter = _interopRequireDefault(require_MariaDbFormatter());
    var _MySqlFormatter = _interopRequireDefault(require_MySqlFormatter());
    var _N1qlFormatter = _interopRequireDefault(require_N1qlFormatter());
    var _PlSqlFormatter = _interopRequireDefault(require_PlSqlFormatter());
    var _PostgreSqlFormatter = _interopRequireDefault(require_PostgreSqlFormatter());
    var _RedshiftFormatter = _interopRequireDefault(require_RedshiftFormatter());
    var _SparkSqlFormatter = _interopRequireDefault(require_SparkSqlFormatter());
    var _StandardSqlFormatter = _interopRequireDefault(require_StandardSqlFormatter());
    var _TSqlFormatter = _interopRequireDefault(require_TSqlFormatter());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var formatters = {
      db2: _Db2Formatter["default"],
      mariadb: _MariaDbFormatter["default"],
      mysql: _MySqlFormatter["default"],
      n1ql: _N1qlFormatter["default"],
      plsql: _PlSqlFormatter["default"],
      postgresql: _PostgreSqlFormatter["default"],
      redshift: _RedshiftFormatter["default"],
      spark: _SparkSqlFormatter["default"],
      sql: _StandardSqlFormatter["default"],
      tsql: _TSqlFormatter["default"]
    };
    var format = function format2(query) {
      var cfg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (typeof query !== "string") {
        throw new Error("Invalid query argument. Extected string, instead got " + _typeof(query));
      }
      var Formatter = _StandardSqlFormatter["default"];
      if (cfg.language !== void 0) {
        Formatter = formatters[cfg.language];
      }
      if (Formatter === void 0) {
        throw Error("Unsupported SQL dialect: ".concat(cfg.language));
      }
      return new Formatter(cfg).format(query);
    };
    exports.format = format;
    var supportedDialects = Object.keys(formatters);
    exports.supportedDialects = supportedDialects;
  }
});

// dep:sql-formatter
var sql_formatter_default = require_sqlFormatter();
export {
  sql_formatter_default as default
};
//# sourceMappingURL=sql-formatter.js.map
