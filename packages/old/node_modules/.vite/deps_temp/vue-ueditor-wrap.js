import "./chunk-SNBWPKJK.js";
import {
  createVNode,
  defineComponent,
  nextTick,
  onBeforeUnmount,
  onDeactivated,
  ref,
  toRef,
  watch
} from "./chunk-W7RKYP7C.js";
import "./chunk-MF7N2UXY.js";

// ../../node_modules/.pnpm/vue-ueditor-wrap@3.0.8_vue@3.2.41/node_modules/vue-ueditor-wrap/es/utils/camelize.js
function camelize(str) {
  return str.replace(/-(\w)/g, function(_, c) {
    return c ? c.toUpperCase() : "";
  });
}

// ../../node_modules/.pnpm/vue-ueditor-wrap@3.0.8_vue@3.2.41/node_modules/vue-ueditor-wrap/es/utils/with-install.js
function withInstall(options) {
  options.install = function(app) {
    var _ref = options, name = _ref.name;
    app.component(name, options);
    app.component(camelize("-" + name), options);
  };
  return options;
}

// ../../node_modules/.pnpm/vue-ueditor-wrap@3.0.8_vue@3.2.41/node_modules/vue-ueditor-wrap/es/utils/LoadEvent.js
var LoadEvent = function() {
  function LoadEvent2() {
    this.listeners = {};
  }
  var _proto = LoadEvent2.prototype;
  _proto.on = function on(eventName, callback) {
    if (this.listeners[eventName] === void 0) {
      this.listeners[eventName] = {
        triggered: false,
        requested: false,
        cbs: []
      };
    }
    if (this.listeners[eventName].triggered) {
      callback();
    }
    this.listeners[eventName].cbs.push(callback);
  };
  _proto.emit = function emit(eventName) {
    if (this.listeners[eventName]) {
      this.listeners[eventName].triggered = true;
      this.listeners[eventName].cbs.forEach(function(callback) {
        return callback();
      });
    }
  };
  return LoadEvent2;
}();

// ../../node_modules/.pnpm/vue-ueditor-wrap@3.0.8_vue@3.2.41/node_modules/vue-ueditor-wrap/es/utils/debounce.js
function debounce(func, delay) {
  var timer;
  var debouncedFunction = function debouncedFunction2() {
    var _this = this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (timer)
      clearTimeout(timer);
    timer = setTimeout(function() {
      func.apply(_this, args);
    }, delay);
  };
  debouncedFunction.cancel = function() {
    if (timer !== void 0) {
      clearTimeout(timer);
    }
  };
  return debouncedFunction;
}

// ../../node_modules/.pnpm/vue-ueditor-wrap@3.0.8_vue@3.2.41/node_modules/vue-ueditor-wrap/es/utils/async-series.js
function asyncSeries(funs) {
  return funs.reduce(function(promise, fun) {
    return promise.then(fun);
  }, Promise.resolve());
}

// ../../node_modules/.pnpm/vue-ueditor-wrap@3.0.8_vue@3.2.41/node_modules/vue-ueditor-wrap/es/utils/randomString.js
function randomString(length) {
  var alphabet = "abcdefghijklmnopqrstuvwxyz";
  var str = "";
  for (var i = 0; i < length; i++) {
    str += alphabet.charAt(Math.floor(Math.random() * alphabet.length));
  }
  return str;
}

// ../../node_modules/.pnpm/vue-ueditor-wrap@3.0.8_vue@3.2.41/node_modules/vue-ueditor-wrap/es/vue-ueditor-wrap/VueUeditorWrap.js
var VueUeditorWrap_default = defineComponent({
  name: "vue-ueditor-wrap",
  props: {
    editorId: String,
    name: String,
    modelValue: {
      type: String,
      default: ""
    },
    config: Object,
    mode: {
      type: String,
      default: "observer",
      validator: function validator(value) {
        return ["observer", "listener"].indexOf(value) !== -1;
      }
    },
    observerOptions: {
      type: Object,
      default: function _default() {
        return {
          attributes: true,
          attributeFilter: ["src", "style", "type", "name"],
          characterData: true,
          childList: true,
          subtree: true
        };
      }
    },
    observerDebounceTime: {
      type: Number,
      default: 50,
      validator: function validator2(value) {
        return value >= 20;
      }
    },
    forceInit: Boolean,
    destroy: {
      type: Boolean,
      default: true
    },
    editorDependencies: {
      type: Array
    },
    editorDependenciesChecker: {
      type: Function
    }
  },
  emits: ["update:modelValue", "before-init", "ready"],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var STATUS_MAP = {
      UN_READY: "UN_READY",
      PENDING: "PENDING",
      READY: "READY"
    };
    var status = STATUS_MAP.UN_READY;
    var editor;
    var observer;
    var innerValue;
    var container = ref();
    var defaultEditorDependencies = ["ueditor.config.js", "ueditor.all.min.js"];
    var defaultEditorDependenciesChecker = function defaultEditorDependenciesChecker2() {
      return window.UE && window.UE.getEditor && window.UEDITOR_CONFIG && Object.keys(window.UEDITOR_CONFIG).length !== 0;
    };
    var modelValue = toRef(props, "modelValue");
    if (!window.$loadEventBus) {
      window.$loadEventBus = new LoadEvent();
    }
    var loadScript = function loadScript2(link) {
      return new Promise(function(resolve, reject) {
        window.$loadEventBus.on(link, resolve);
        if (window.$loadEventBus.listeners[link].requested === false) {
          window.$loadEventBus.listeners[link].requested = true;
          var script = document.createElement("script");
          script.src = link;
          script.onload = function() {
            window.$loadEventBus.emit(link);
          };
          script.onerror = reject;
          document.getElementsByTagName("head")[0].appendChild(script);
        }
      });
    };
    var loadCss = function loadCss2(link) {
      return new Promise(function(resolve, reject) {
        window.$loadEventBus.on(link, resolve);
        if (window.$loadEventBus.listeners[link].requested === false) {
          window.$loadEventBus.listeners[link].requested = true;
          var css = document.createElement("link");
          css.type = "text/css";
          css.rel = "stylesheet";
          css.href = link;
          css.onload = function() {
            window.$loadEventBus.emit(link);
          };
          css.onerror = reject;
          document.getElementsByTagName("head")[0].appendChild(css);
        }
      });
    };
    var loadEditorDependencies = function loadEditorDependencies2() {
      return new Promise(function(resolve, reject) {
        if (props.editorDependencies && props.editorDependenciesChecker && props.editorDependenciesChecker()) {
          resolve();
          return;
        }
        if (!props.editorDependencies && defaultEditorDependenciesChecker()) {
          resolve();
          return;
        }
        var _reduce = (props.editorDependencies || defaultEditorDependencies).reduce(function(res, link) {
          var isFullUrl = /^((https?:)?\/\/)?[-a-zA-Z0-9]+(\.[-a-zA-Z0-9]+)+\//.test(link);
          if (!isFullUrl) {
            var _props$config;
            link = (((_props$config = props.config) == null ? void 0 : _props$config.UEDITOR_HOME_URL) || "") + link;
          }
          if (link.slice(-3) === ".js") {
            res.jsLinks.push(link);
          } else if (link.slice(-4) === ".css") {
            res.cssLinks.push(link);
          }
          return res;
        }, {
          jsLinks: [],
          cssLinks: []
        }), jsLinks = _reduce.jsLinks, cssLinks = _reduce.cssLinks;
        Promise.all([
          Promise.all(cssLinks.map(function(link) {
            return loadCss(link);
          })),
          asyncSeries(jsLinks.map(function(link) {
            return function() {
              return loadScript(link);
            };
          }))
        ]).then(function() {
          return resolve();
        }).catch(reject);
      });
    };
    var observerContentChangeHandler = function observerContentChangeHandler2() {
      innerValue = editor.getContent();
      emit("update:modelValue", innerValue);
    };
    var normalChangeListener = function normalChangeListener2() {
      editor.addListener("contentChange", observerContentChangeHandler);
    };
    var changeHandle = function changeHandle2() {
      if (editor.document.getElementById("baidu_pastebin")) {
        return;
      }
      innerValue = editor.getContent();
      emit("update:modelValue", innerValue);
    };
    var observerChangeListener = function observerChangeListener2() {
      observer = new MutationObserver(debounce(changeHandle, props.observerDebounceTime));
      observer.observe(editor.body, props.observerOptions);
    };
    var initEditor = function initEditor2() {
      var editorId = props.editorId || "editor_" + randomString(8);
      container.value.id = editorId;
      emit("before-init", editorId);
      editor = window.UE.getEditor(editorId, props.config);
      editor.addListener("ready", function() {
        if (status === STATUS_MAP.READY) {
          editor.setContent(props.modelValue);
        } else {
          status = STATUS_MAP.READY;
          emit("ready", editor);
          if (props.modelValue) {
            editor.setContent(props.modelValue);
          }
        }
        if (props.mode === "observer" && window.MutationObserver) {
          observerChangeListener();
        } else {
          normalChangeListener();
        }
      });
    };
    watch(modelValue, function(value) {
      if (status === STATUS_MAP.UN_READY) {
        status = STATUS_MAP.PENDING;
        (props.forceInit || typeof window !== "undefined") && loadEditorDependencies().then(function() {
          container.value ? initEditor() : nextTick(function() {
            return initEditor();
          });
        }).catch(function() {
          throw new Error("[vue-ueditor-wrap] UEditor \u8D44\u6E90\u52A0\u8F7D\u5931\u8D25\uFF01\u8BF7\u68C0\u67E5\u8D44\u6E90\u662F\u5426\u5B58\u5728\uFF0CUEDITOR_HOME_URL \u662F\u5426\u914D\u7F6E\u6B63\u786E\uFF01");
        });
      } else if (status === STATUS_MAP.READY) {
        value === innerValue || editor.setContent(value || "");
      }
    }, {
      immediate: true
    });
    onDeactivated(function() {
      editor && editor.removeListener("contentChange", observerContentChangeHandler);
      observer && observer.disconnect();
    });
    onBeforeUnmount(function() {
      if (observer && observer.disconnect) {
        observer.disconnect();
      }
      if (props.destroy && editor && editor.destroy) {
        editor.destroy();
      }
    });
    return function() {
      return createVNode("div", null, [createVNode("div", {
        "ref": container,
        "name": props.name
      }, null)]);
    };
  }
});

// ../../node_modules/.pnpm/vue-ueditor-wrap@3.0.8_vue@3.2.41/node_modules/vue-ueditor-wrap/es/vue-ueditor-wrap/index.js
var VueUeditorWrap = withInstall(VueUeditorWrap_default);
var vue_ueditor_wrap_default = VueUeditorWrap;

// ../../node_modules/.pnpm/vue-ueditor-wrap@3.0.8_vue@3.2.41/node_modules/vue-ueditor-wrap/es/index.js
var version = "3.0.8";
function install(app) {
  var components = [vue_ueditor_wrap_default];
  components.forEach(function(item) {
    if (item.install) {
      app.use(item);
    } else if (item.name) {
      app.component(item.name, item);
    }
  });
}
var es_default = {
  install,
  version
};

// dep:vue-ueditor-wrap
var vue_ueditor_wrap_default2 = es_default;
export {
  vue_ueditor_wrap_default as VueUeditorWrap,
  vue_ueditor_wrap_default2 as default,
  install,
  version
};
//# sourceMappingURL=vue-ueditor-wrap.js.map
